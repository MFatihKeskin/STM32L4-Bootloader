
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a28  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  08001bd8  08001bd8  00011bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002384  08002384  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002384  08002384  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002384  08002384  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002384  08002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002388  08002388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800238c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          0000e070  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000e0dc  2000e0dc  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000020ab  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007d6  00000000  00000000  00022147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00022920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000180  00000000  00000000  00022af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd5f  00000000  00000000  00022c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000026b7  00000000  00000000  000429d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae53d  00000000  00000000  0004508e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f35cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009f4  00000000  00000000  000f361c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001bc0 	.word	0x08001bc0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08001bc0 	.word	0x08001bc0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <bootloader_default_mode>:

/**************************JUMP TO APP**********************************/


void bootloader_default_mode(void)																//let default mode blinky
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
	printMessages("BL BOOTLOADER MSG: Hello from the default mode\r\n");
 8000296:	480b      	ldr	r0, [pc, #44]	; (80002c4 <bootloader_default_mode+0x34>)
 8000298:	f000 fbbc 	bl	8000a14 <printMessages>
	for (int i=0; i<500;i++){
 800029c:	2300      	movs	r3, #0
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	e006      	b.n	80002b0 <bootloader_default_mode+0x20>
		app1_green_led_blink();
 80002a2:	f000 fa0d 	bl	80006c0 <app1_green_led_blink>
		app2_red_led_blink();
 80002a6:	f000 fa29 	bl	80006fc <app2_red_led_blink>
	for (int i=0; i<500;i++){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	3301      	adds	r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002b6:	dbf4      	blt.n	80002a2 <bootloader_default_mode+0x12>
	}
}
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	08001bd8 	.word	0x08001bd8

080002c8 <bootloader_jump_to_user_app1>:

void bootloader_jump_to_user_app1(void)                                                         //************  APP1  *************//
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
	
	void (*bootloader_application_reset_handler)(void);                                         //1. holding to reset handler address
	//printMessages("BL DEBUG MSG: Called bootloader_jump_to_user_application() \n");

	uint32_t mspValue = *(volatile uint32_t*) FLASH_JUMP_APP_1;                                 //3. flash jump adress = msp value
 80002ce:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <bootloader_jump_to_user_app1+0x30>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	f383 8808 	msr	MSP, r3
}
 80002de:	bf00      	nop
	//printMessages("BL DEBUG MSG: MSP Value: %#x \n", mspValue);
	__set_MSP(mspValue);

	uint32_t resetValue = *(volatile uint32_t*) (FLASH_JUMP_APP_1 + 4U);                        //2. Reset Handler = msp+4
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <bootloader_jump_to_user_app1+0x34>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	60bb      	str	r3, [r7, #8]
	//printMessages("BL DEBUG MSG: Reset Value: %#x \n", resetValue);

	bootloader_application_reset_handler = (void*) resetValue;                                  //5. new operation with reset handler
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	607b      	str	r3, [r7, #4]

	bootloader_application_reset_handler();                                                     //6. Reset Handler called and jump the user app
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4798      	blx	r3

}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	08040000 	.word	0x08040000
 80002fc:	08040004 	.word	0x08040004

08000300 <bootloader_jump_to_user_app2>:

void bootloader_jump_to_user_app2(void)                                                         //************  APP2  *************//
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
	void (*bootloader_application_reset_handler)(void);                                         //1. holding to reset handler address
	//printMessages("BL DEBUG MSG: Called bootloader_jump_to_user_application() \n");

	uint32_t mspValue = *(volatile uint32_t*) FLASH_JUMP_APP_2;                                 //3. flash jump adress = msp value
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <bootloader_jump_to_user_app2+0x30>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	f383 8808 	msr	MSP, r3
}
 8000316:	bf00      	nop
	//printMessages("BL DEBUG MSG: MSP Value: %#x \n", mspValue);
	__set_MSP(mspValue);

	uint32_t resetValue = *(volatile uint32_t*) (FLASH_JUMP_APP_2 + 4U);                        //2. Reset Handler = msp+4
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <bootloader_jump_to_user_app2+0x34>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	60bb      	str	r3, [r7, #8]
	//printMessages("BL DEBUG MSG: Reset Value: %#x \n", resetValue);

	bootloader_application_reset_handler = (void*) resetValue;                                  //5. new operation with reset handler
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	607b      	str	r3, [r7, #4]

	bootloader_application_reset_handler();                                                     //6. Reset Handler called and jump the user app
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4798      	blx	r3

}
 8000326:	bf00      	nop
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	08080000 	.word	0x08080000
 8000334:	08080004 	.word	0x08080004

08000338 <BSP_FLASH_Lock>:


/*************************************LOCK/UNLOCK*************************************/

void BSP_FLASH_Lock(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	FLASH->CR |= 0x80000000;
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <BSP_FLASH_Lock+0x1c>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <BSP_FLASH_Lock+0x1c>)
 8000342:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000346:	6153      	str	r3, [r2, #20]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40022000 	.word	0x40022000

08000358 <BSP_FLASH_UnLock>:


void BSP_FLASH_UnLock(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
	while ((FLASH->SR & 0x00010000) != 0 );
 800035c:	bf00      	nop
 800035e:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <BSP_FLASH_UnLock+0x30>)
 8000360:	691b      	ldr	r3, [r3, #16]
 8000362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1f9      	bne.n	800035e <BSP_FLASH_UnLock+0x6>

	if(FLASH->CR & 0x80000000)
 800036a:	4b07      	ldr	r3, [pc, #28]	; (8000388 <BSP_FLASH_UnLock+0x30>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	2b00      	cmp	r3, #0
 8000370:	da05      	bge.n	800037e <BSP_FLASH_UnLock+0x26>
	{
		FLASH->KEYR = 0x45670123;
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <BSP_FLASH_UnLock+0x30>)
 8000374:	4a05      	ldr	r2, [pc, #20]	; (800038c <BSP_FLASH_UnLock+0x34>)
 8000376:	609a      	str	r2, [r3, #8]
		FLASH->KEYR = 0xCDEF89AB;
 8000378:	4b03      	ldr	r3, [pc, #12]	; (8000388 <BSP_FLASH_UnLock+0x30>)
 800037a:	4a05      	ldr	r2, [pc, #20]	; (8000390 <BSP_FLASH_UnLock+0x38>)
 800037c:	609a      	str	r2, [r3, #8]
	}
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	40022000 	.word	0x40022000
 800038c:	45670123 	.word	0x45670123
 8000390:	cdef89ab 	.word	0xcdef89ab

08000394 <BSP_FLASH_BankPageErase>:

/*************************************ERASE*************************************/

void BSP_FLASH_BankPageErase(uint8_t EraseBankNo, uint16_t ErasePage){//Per page is 2Kb and 256 page, per bank has 512Kb and 2 bank equal flash size
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	460a      	mov	r2, r1
 800039e:	71fb      	strb	r3, [r7, #7]
 80003a0:	4613      	mov	r3, r2
 80003a2:	80bb      	strh	r3, [r7, #4]

	FLASH->SR |= 0x00000001;										// End of Operation flag clear
 80003a4:	4b3c      	ldr	r3, [pc, #240]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a3b      	ldr	r2, [pc, #236]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6113      	str	r3, [r2, #16]
	FLASH->SR |= 0x00000040;										// Programming Parallelism error flag clear
 80003b0:	4b39      	ldr	r3, [pc, #228]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 80003b2:	691b      	ldr	r3, [r3, #16]
 80003b4:	4a38      	ldr	r2, [pc, #224]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 80003b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ba:	6113      	str	r3, [r2, #16]
	FLASH->SR |= 0x00000010;										// Write protected error flag clear
 80003bc:	4b36      	ldr	r3, [pc, #216]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 80003be:	691b      	ldr	r3, [r3, #16]
 80003c0:	4a35      	ldr	r2, [pc, #212]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	6113      	str	r3, [r2, #16]

	while((FLASH->SR & 0x00010000) != 0);                           //Check that no Flash memory operation is ongoing by checking the BSY bit
 80003c8:	bf00      	nop
 80003ca:	4b33      	ldr	r3, [pc, #204]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 80003cc:	691b      	ldr	r3, [r3, #16]
 80003ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d1f9      	bne.n	80003ca <BSP_FLASH_BankPageErase+0x36>
    FLASH->SR |= 1U << 7;                                           //Check and clear all error programming flags due to a previous programming. If not, PGSERR is set.
 80003d6:	4b30      	ldr	r3, [pc, #192]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 80003d8:	691b      	ldr	r3, [r3, #16]
 80003da:	4a2f      	ldr	r2, [pc, #188]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 80003dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e0:	6113      	str	r3, [r2, #16]
    FLASH->CR |= 1U << 1;											//Set the PER bit
 80003e2:	4b2d      	ldr	r3, [pc, #180]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a2c      	ldr	r2, [pc, #176]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 80003e8:	f043 0302 	orr.w	r3, r3, #2
 80003ec:	6153      	str	r3, [r2, #20]
	if(EraseBankNo==1){
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d122      	bne.n	800043a <BSP_FLASH_BankPageErase+0xa6>
		FLASH->CR |= 0U << 11;
 80003f4:	4b28      	ldr	r3, [pc, #160]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 80003f6:	4a28      	ldr	r2, [pc, #160]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	6153      	str	r3, [r2, #20]
		for(int i=ErasePage;i<160;i++){
 80003fc:	88bb      	ldrh	r3, [r7, #4]
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	e017      	b.n	8000432 <BSP_FLASH_BankPageErase+0x9e>
			FLASH->CR |= i << 3;									//binary value shifted pnb regster
 8000402:	4b25      	ldr	r3, [pc, #148]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	68fa      	ldr	r2, [r7, #12]
 8000408:	00d2      	lsls	r2, r2, #3
 800040a:	4611      	mov	r1, r2
 800040c:	4a22      	ldr	r2, [pc, #136]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 800040e:	430b      	orrs	r3, r1
 8000410:	6153      	str	r3, [r2, #20]
		    FLASH->CR |= 1U << 16;                                  //strt bit set. HSİ on so 16mhz.
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a20      	ldr	r2, [pc, #128]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 8000418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800041c:	6153      	str	r3, [r2, #20]
			while((FLASH->SR & 0x00010000) != 0);                   //Check that no Flash memory operation is ongoing by checking the BSY bit
 800041e:	bf00      	nop
 8000420:	4b1d      	ldr	r3, [pc, #116]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 8000422:	691b      	ldr	r3, [r3, #16]
 8000424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000428:	2b00      	cmp	r3, #0
 800042a:	d1f9      	bne.n	8000420 <BSP_FLASH_BankPageErase+0x8c>
		for(int i=ErasePage;i<160;i++){
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	3301      	adds	r3, #1
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	2b9f      	cmp	r3, #159	; 0x9f
 8000436:	dde4      	ble.n	8000402 <BSP_FLASH_BankPageErase+0x6e>
			FLASH->CR |= i << 3;									//binary value shifted pnb regster
		    FLASH->CR |= 1U << 16;                                  //strt bit set. HSİ on so 16mhz.
			while((FLASH->SR & 0x00010000) != 0);                   //Check that no Flash memory operation is ongoing by checking the BSY bit
		}
	}
}
 8000438:	e027      	b.n	800048a <BSP_FLASH_BankPageErase+0xf6>
	else if(EraseBankNo==2){
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d124      	bne.n	800048a <BSP_FLASH_BankPageErase+0xf6>
		FLASH->CR |= 1U << 11;
 8000440:	4b15      	ldr	r3, [pc, #84]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	4a14      	ldr	r2, [pc, #80]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 8000446:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800044a:	6153      	str	r3, [r2, #20]
		for(int i=ErasePage;i<288;i++){
 800044c:	88bb      	ldrh	r3, [r7, #4]
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	e017      	b.n	8000482 <BSP_FLASH_BankPageErase+0xee>
			FLASH->CR |= i << 3;									//binary value shifted pnb regster
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	68ba      	ldr	r2, [r7, #8]
 8000458:	00d2      	lsls	r2, r2, #3
 800045a:	4611      	mov	r1, r2
 800045c:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 800045e:	430b      	orrs	r3, r1
 8000460:	6153      	str	r3, [r2, #20]
		    FLASH->CR |= 1U << 16;                                  //strt bit set. HSİ on so 16mhz.
 8000462:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a0c      	ldr	r2, [pc, #48]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 8000468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800046c:	6153      	str	r3, [r2, #20]
			while((FLASH->SR & 0x00010000) != 0);                   //Check that no Flash memory operation is ongoing by checking the BSY bit
 800046e:	bf00      	nop
 8000470:	4b09      	ldr	r3, [pc, #36]	; (8000498 <BSP_FLASH_BankPageErase+0x104>)
 8000472:	691b      	ldr	r3, [r3, #16]
 8000474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000478:	2b00      	cmp	r3, #0
 800047a:	d1f9      	bne.n	8000470 <BSP_FLASH_BankPageErase+0xdc>
		for(int i=ErasePage;i<288;i++){
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	3301      	adds	r3, #1
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8000488:	dbe3      	blt.n	8000452 <BSP_FLASH_BankPageErase+0xbe>
}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40022000 	.word	0x40022000

0800049c <BSP_FLASH_EraseRoutine>:

void BSP_FLASH_EraseRoutine(uint8_t EraseBankNo){
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
	BSP_FLASH_UnLock();
 80004a6:	f7ff ff57 	bl	8000358 <BSP_FLASH_UnLock>
	if(EraseBankNo==1){
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d105      	bne.n	80004bc <BSP_FLASH_EraseRoutine+0x20>
		BSP_FLASH_BankPageErase(EraseBankNo,128);
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff ff6d 	bl	8000394 <BSP_FLASH_BankPageErase>
 80004ba:	e00b      	b.n	80004d4 <BSP_FLASH_EraseRoutine+0x38>
	}
	else if(EraseBankNo==2){
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d106      	bne.n	80004d0 <BSP_FLASH_EraseRoutine+0x34>
		BSP_FLASH_BankPageErase(EraseBankNo,256);
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ff63 	bl	8000394 <BSP_FLASH_BankPageErase>
 80004ce:	e001      	b.n	80004d4 <BSP_FLASH_EraseRoutine+0x38>
	}
	else{
		BSP_FLASH_Lock();
 80004d0:	f7ff ff32 	bl	8000338 <BSP_FLASH_Lock>
	}
	BSP_FLASH_Lock();
 80004d4:	f7ff ff30 	bl	8000338 <BSP_FLASH_Lock>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <FLASH_FlushCaches>:

/*************************************FLASH PROGRAM INTO FLASH******************************/


void FLASH_FlushCaches(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80004e6:	4b21      	ldr	r3, [pc, #132]	; (800056c <FLASH_FlushCaches+0x8c>)
 80004e8:	7e1b      	ldrb	r3, [r3, #24]
 80004ea:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d002      	beq.n	80004f8 <FLASH_FlushCaches+0x18>
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d117      	bne.n	8000528 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80004f8:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <FLASH_FlushCaches+0x90>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a1c      	ldr	r2, [pc, #112]	; (8000570 <FLASH_FlushCaches+0x90>)
 80004fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000502:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <FLASH_FlushCaches+0x90>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a19      	ldr	r2, [pc, #100]	; (8000570 <FLASH_FlushCaches+0x90>)
 800050a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800050e:	6013      	str	r3, [r2, #0]
 8000510:	4b17      	ldr	r3, [pc, #92]	; (8000570 <FLASH_FlushCaches+0x90>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a16      	ldr	r2, [pc, #88]	; (8000570 <FLASH_FlushCaches+0x90>)
 8000516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800051a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <FLASH_FlushCaches+0x90>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a13      	ldr	r2, [pc, #76]	; (8000570 <FLASH_FlushCaches+0x90>)
 8000522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000526:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d002      	beq.n	8000534 <FLASH_FlushCaches+0x54>
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	2b03      	cmp	r3, #3
 8000532:	d111      	bne.n	8000558 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <FLASH_FlushCaches+0x90>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <FLASH_FlushCaches+0x90>)
 800053a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <FLASH_FlushCaches+0x90>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <FLASH_FlushCaches+0x90>)
 8000546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800054a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <FLASH_FlushCaches+0x90>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <FLASH_FlushCaches+0x90>)
 8000552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000556:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <FLASH_FlushCaches+0x8c>)
 800055a:	2200      	movs	r2, #0
 800055c:	761a      	strb	r2, [r3, #24]
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000088 	.word	0x20000088
 8000570:	40022000 	.word	0x40022000

08000574 <DoubleWordWriteInit>:

void DoubleWordWriteInit(uint32_t Address, uint32_t Data){											//its not a doubleword. but its work
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	FLASH->CR |= 1U << 0;
 800057e:	4b07      	ldr	r3, [pc, #28]	; (800059c <DoubleWordWriteInit+0x28>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a06      	ldr	r2, [pc, #24]	; (800059c <DoubleWordWriteInit+0x28>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6153      	str	r3, [r2, #20]
	*(__IO uint32_t*)Address = (uint32_t)Data;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	601a      	str	r2, [r3, #0]
	//__ISB();
	//*(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	40022000 	.word	0x40022000

080005a0 <BSP_FlashProgram>:

void BSP_FlashProgram(uint32_t Address, uint32_t Data){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
	uint32_t prog_bit = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
	//__HAL_LOCK(&pFlash);
	while((FLASH->SR & 0x00010000) != 0);
 80005ae:	bf00      	nop
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <BSP_FlashProgram+0x64>)
 80005b2:	691b      	ldr	r3, [r3, #16]
 80005b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d1f9      	bne.n	80005b0 <BSP_FlashProgram+0x10>
	if((FLASH->SR & 0x00010000) == 0){
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <BSP_FlashProgram+0x64>)
 80005be:	691b      	ldr	r3, [r3, #16]
 80005c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d102      	bne.n	80005ce <BSP_FlashProgram+0x2e>
		pFlash.ErrorCode = 0;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <BSP_FlashProgram+0x68>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
	}
	if((FLASH->ACR, FLASH_ACR_DCEN) != 0U){
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <BSP_FlashProgram+0x64>)
 80005d0:	681b      	ldr	r3, [r3, #0]
		FLASH->ACR &= 0U << 10;
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <BSP_FlashProgram+0x64>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <BSP_FlashProgram+0x64>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
		pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <BSP_FlashProgram+0x68>)
 80005de:	2202      	movs	r2, #2
 80005e0:	761a      	strb	r2, [r3, #24]
	}
	else{
	  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
	}
	DoubleWordWriteInit(Address, Data);
 80005e2:	6839      	ldr	r1, [r7, #0]
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff ffc5 	bl	8000574 <DoubleWordWriteInit>
	//prog_bit = FLASH_CR_PG;
	while((FLASH->SR & 0x00010000) != 0);
 80005ea:	bf00      	nop
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <BSP_FlashProgram+0x64>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1f9      	bne.n	80005ec <BSP_FlashProgram+0x4c>
	//if (prog_bit != 0U){
	  //CLEAR_BIT(FLASH->CR, prog_bit);
	//}
	FLASH_FlushCaches();
 80005f8:	f7ff ff72 	bl	80004e0 <FLASH_FlushCaches>
	//__HAL_UNLOCK(&pFlash);
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40022000 	.word	0x40022000
 8000608:	20000088 	.word	0x20000088

0800060c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	2b00      	cmp	r3, #0
 800061c:	db0b      	blt.n	8000636 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	f003 021f 	and.w	r2, r3, #31
 8000624:	4907      	ldr	r1, [pc, #28]	; (8000644 <__NVIC_EnableIRQ+0x38>)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	095b      	lsrs	r3, r3, #5
 800062c:	2001      	movs	r0, #1
 800062e:	fa00 f202 	lsl.w	r2, r0, r2
 8000632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000e100 	.word	0xe000e100

08000648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	6039      	str	r1, [r7, #0]
 8000652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db0a      	blt.n	8000672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	b2da      	uxtb	r2, r3
 8000660:	490c      	ldr	r1, [pc, #48]	; (8000694 <__NVIC_SetPriority+0x4c>)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	0112      	lsls	r2, r2, #4
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	440b      	add	r3, r1
 800066c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000670:	e00a      	b.n	8000688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4908      	ldr	r1, [pc, #32]	; (8000698 <__NVIC_SetPriority+0x50>)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	3b04      	subs	r3, #4
 8000680:	0112      	lsls	r2, r2, #4
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	440b      	add	r3, r1
 8000686:	761a      	strb	r2, [r3, #24]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <delay_ms>:


/****************************BACKUP FUNCTION********************************/

void delay_ms(uint32_t time)															// for 4MHz: time=400000 is 1s delay
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	while(time--);
 80006a4:	bf00      	nop
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	1e5a      	subs	r2, r3, #1
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1fa      	bne.n	80006a6 <delay_ms+0xa>
}
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <app1_green_led_blink>:
	}
}

/******************************TASKS**********************************/

void app1_green_led_blink(void){														// pc7 --> 1 second green led blink function
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	RCC->AHB2ENR = 0x00000004;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <app1_green_led_blink+0x30>)
 80006c6:	2204      	movs	r2, #4
 80006c8:	64da      	str	r2, [r3, #76]	; 0x4c
	GPIOC-> MODER   = 1U << 2*7;
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <app1_green_led_blink+0x34>)
 80006cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d0:	601a      	str	r2, [r3, #0]
	GPIOC->ODR = 1U << 7;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <app1_green_led_blink+0x34>)
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	615a      	str	r2, [r3, #20]
	delay_ms(400000);
 80006d8:	4807      	ldr	r0, [pc, #28]	; (80006f8 <app1_green_led_blink+0x38>)
 80006da:	f7ff ffdf 	bl	800069c <delay_ms>
	GPIOC->ODR = 0U << 7;
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <app1_green_led_blink+0x34>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
	delay_ms(400000);
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <app1_green_led_blink+0x38>)
 80006e6:	f7ff ffd9 	bl	800069c <delay_ms>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48000800 	.word	0x48000800
 80006f8:	00061a80 	.word	0x00061a80

080006fc <app2_red_led_blink>:

void app2_red_led_blink(void){															//pb14 --> 1 second red led blink function
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	RCC->AHB2ENR = 0x00000002;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <app2_red_led_blink+0x30>)
 8000702:	2202      	movs	r2, #2
 8000704:	64da      	str	r2, [r3, #76]	; 0x4c
	GPIOB-> MODER   = 1U << 2*14;
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <app2_red_led_blink+0x34>)
 8000708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800070c:	601a      	str	r2, [r3, #0]
	GPIOB->ODR = 1U << 14;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <app2_red_led_blink+0x34>)
 8000710:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000714:	615a      	str	r2, [r3, #20]
	delay_ms(400000);
 8000716:	4807      	ldr	r0, [pc, #28]	; (8000734 <app2_red_led_blink+0x38>)
 8000718:	f7ff ffc0 	bl	800069c <delay_ms>
	GPIOB->ODR = 0U << 14;
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <app2_red_led_blink+0x34>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
	delay_ms(400000);
 8000722:	4804      	ldr	r0, [pc, #16]	; (8000734 <app2_red_led_blink+0x38>)
 8000724:	f7ff ffba 	bl	800069c <delay_ms>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000
 8000730:	48000400 	.word	0x48000400
 8000734:	00061a80 	.word	0x00061a80

08000738 <RCCInitForUSART>:

/**************************USART COMMUNICATION INIT*************************/


void RCCInitForUSART(char char_type_port_name){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	switch(char_type_port_name){
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	2b41      	cmp	r3, #65	; 0x41
 8000746:	d002      	beq.n	800074e <RCCInitForUSART+0x16>
 8000748:	2b43      	cmp	r3, #67	; 0x43
 800074a:	d018      	beq.n	800077e <RCCInitForUSART+0x46>
 800074c:	e029      	b.n	80007a2 <RCCInitForUSART+0x6a>
	case 'A': //usart 1&2
		RCC->AHB2ENR &= 0x0;         													//reset value for protection
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <RCCInitForUSART+0x88>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <RCCInitForUSART+0x88>)
 8000754:	2200      	movs	r2, #0
 8000756:	64da      	str	r2, [r3, #76]	; 0x4c
		RCC->AHB2ENR |= (1U << 2*1);													//GPIOA Clock Enable
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <RCCInitForUSART+0x88>)
 800075a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075c:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <RCCInitForUSART+0x88>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	64d3      	str	r3, [r2, #76]	; 0x4c

		RCC->APB2ENR |= 1U << 14;														//usart1 clk enable
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <RCCInitForUSART+0x88>)
 8000766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000768:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <RCCInitForUSART+0x88>)
 800076a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076e:	6613      	str	r3, [r2, #96]	; 0x60
		RCC->APB2ENR |= 1U << 17;														//usart2 clk enable
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <RCCInitForUSART+0x88>)
 8000772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <RCCInitForUSART+0x88>)
 8000776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077a:	6613      	str	r3, [r2, #96]	; 0x60
		break;
 800077c:	e01c      	b.n	80007b8 <RCCInitForUSART+0x80>
	case 'C': //usart3
		RCC->AHB2ENR &= 0x0;         													//reset value for protection
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <RCCInitForUSART+0x88>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <RCCInitForUSART+0x88>)
 8000784:	2200      	movs	r2, #0
 8000786:	64da      	str	r2, [r3, #76]	; 0x4c
		RCC->AHB2ENR |= (1U << 2);														//GPIOC Clock Enable
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <RCCInitForUSART+0x88>)
 800078a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <RCCInitForUSART+0x88>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	64d3      	str	r3, [r2, #76]	; 0x4c

		RCC->APB1ENR1 |= 1U << 18;														//usart3 clk enable
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <RCCInitForUSART+0x88>)
 8000796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000798:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <RCCInitForUSART+0x88>)
 800079a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800079e:	6593      	str	r3, [r2, #88]	; 0x58
		break;
 80007a0:	e00a      	b.n	80007b8 <RCCInitForUSART+0x80>
	default:
		USART_WriteText(USART3,"RCC Selection Error!,",20);
 80007a2:	2214      	movs	r2, #20
 80007a4:	4907      	ldr	r1, [pc, #28]	; (80007c4 <RCCInitForUSART+0x8c>)
 80007a6:	4808      	ldr	r0, [pc, #32]	; (80007c8 <RCCInitForUSART+0x90>)
 80007a8:	f000 f8e8 	bl	800097c <USART_WriteText>
		tick++;																			//Systcick Handler for any error
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <RCCInitForUSART+0x94>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	4a06      	ldr	r2, [pc, #24]	; (80007cc <RCCInitForUSART+0x94>)
 80007b4:	6013      	str	r3, [r2, #0]
	}
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40021000 	.word	0x40021000
 80007c4:	08001c0c 	.word	0x08001c0c
 80007c8:	40004800 	.word	0x40004800
 80007cc:	2000e0bc 	.word	0x2000e0bc

080007d0 <GPIOInitForUSART>:

void GPIOInitForUSART(char char_type_port_name, uint8_t int_type_Rx_number, uint8_t int_type_Tx_number)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
 80007da:	460b      	mov	r3, r1
 80007dc:	71bb      	strb	r3, [r7, #6]
 80007de:	4613      	mov	r3, r2
 80007e0:	717b      	strb	r3, [r7, #5]
	RCCInitForUSART(char_type_port_name);												//RCC config called for gpio implementation
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ffa7 	bl	8000738 <RCCInitForUSART>

	switch(char_type_port_name){
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b41      	cmp	r3, #65	; 0x41
 80007ee:	d002      	beq.n	80007f6 <GPIOInitForUSART+0x26>
 80007f0:	2b43      	cmp	r3, #67	; 0x43
 80007f2:	d040      	beq.n	8000876 <GPIOInitForUSART+0xa6>
 80007f4:	e059      	b.n	80008aa <GPIOInitForUSART+0xda>
	case 'A': //usart 1
		if(int_type_Rx_number > 7 || int_type_Tx_number > 7){ 							//AFRL and AFRH condition
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	2b07      	cmp	r3, #7
 80007fa:	d802      	bhi.n	8000802 <GPIOInitForUSART+0x32>
 80007fc:	797b      	ldrb	r3, [r7, #5]
 80007fe:	2b07      	cmp	r3, #7
 8000800:	d91c      	bls.n	800083c <GPIOInitForUSART+0x6c>
			GPIOA->MODER = 0xABFFFFFF;													//reset value for protection
 8000802:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000806:	f06f 42a8 	mvn.w	r2, #1409286144	; 0x54000000
 800080a:	601a      	str	r2, [r3, #0]
			GPIOA->MODER |= (2U << int_type_Rx_number) | (2U << int_type_Tx_number); 	//pa9 and pa10
 800080c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	2102      	movs	r1, #2
 8000816:	4099      	lsls	r1, r3
 8000818:	797b      	ldrb	r3, [r7, #5]
 800081a:	2002      	movs	r0, #2
 800081c:	fa00 f303 	lsl.w	r3, r0, r3
 8000820:	430b      	orrs	r3, r1
 8000822:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000826:	4313      	orrs	r3, r2
 8000828:	600b      	str	r3, [r1, #0]
			GPIOA->AFR[1] |= (7U << 4) | (7U << 8); 									//selected af7 from mux pa9 and pa10
 800082a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800082e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000830:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000834:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000838:	6253      	str	r3, [r2, #36]	; 0x24
		else{
			GPIOA->MODER = 0xABFFFFFF;													//reset value for protection
			GPIOA->MODER  |= (2U << int_type_Rx_number) | (2U << int_type_Tx_number); 	//pa2 and pa3
			GPIOA->AFR[0] |= (7U << 8) | (7U << 4); 									//selected af7 from mux pa3 and pA2
		}
		break;
 800083a:	e041      	b.n	80008c0 <GPIOInitForUSART+0xf0>
			GPIOA->MODER = 0xABFFFFFF;													//reset value for protection
 800083c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000840:	f06f 42a8 	mvn.w	r2, #1409286144	; 0x54000000
 8000844:	601a      	str	r2, [r3, #0]
			GPIOA->MODER  |= (2U << int_type_Rx_number) | (2U << int_type_Tx_number); 	//pa2 and pa3
 8000846:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	79bb      	ldrb	r3, [r7, #6]
 800084e:	2102      	movs	r1, #2
 8000850:	4099      	lsls	r1, r3
 8000852:	797b      	ldrb	r3, [r7, #5]
 8000854:	2002      	movs	r0, #2
 8000856:	fa00 f303 	lsl.w	r3, r0, r3
 800085a:	430b      	orrs	r3, r1
 800085c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000860:	4313      	orrs	r3, r2
 8000862:	600b      	str	r3, [r1, #0]
			GPIOA->AFR[0] |= (7U << 8) | (7U << 4); 									//selected af7 from mux pa3 and pA2
 8000864:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000868:	6a1b      	ldr	r3, [r3, #32]
 800086a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800086e:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000872:	6213      	str	r3, [r2, #32]
		break;
 8000874:	e024      	b.n	80008c0 <GPIOInitForUSART+0xf0>
	case 'C': //usart3
		GPIOC->MODER  = 0xFFFFFFFF;														//reset value for protection
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <GPIOInitForUSART+0xf8>)
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	601a      	str	r2, [r3, #0]
		GPIOC->MODER  &= (2U << 2*int_type_Rx_number) | (2U << 2*int_type_Tx_number);	//pc4 and pc5 alternate func
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <GPIOInitForUSART+0xf8>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	79bb      	ldrb	r3, [r7, #6]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	2102      	movs	r1, #2
 8000888:	4099      	lsls	r1, r3
 800088a:	797b      	ldrb	r3, [r7, #5]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2002      	movs	r0, #2
 8000890:	fa00 f303 	lsl.w	r3, r0, r3
 8000894:	430b      	orrs	r3, r1
 8000896:	490c      	ldr	r1, [pc, #48]	; (80008c8 <GPIOInitForUSART+0xf8>)
 8000898:	4013      	ands	r3, r2
 800089a:	600b      	str	r3, [r1, #0]
		GPIOC->AFR[0] |= (7U << 16) | (7U << 20); 										//selected af7 from mux for pc4 and pc5
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <GPIOInitForUSART+0xf8>)
 800089e:	6a1b      	ldr	r3, [r3, #32]
 80008a0:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <GPIOInitForUSART+0xf8>)
 80008a2:	f443 03ee 	orr.w	r3, r3, #7798784	; 0x770000
 80008a6:	6213      	str	r3, [r2, #32]
		break;
 80008a8:	e00a      	b.n	80008c0 <GPIOInitForUSART+0xf0>
	default:
		USART_WriteText(USART3,"GPIO Selection Error",20);
 80008aa:	2214      	movs	r2, #20
 80008ac:	4907      	ldr	r1, [pc, #28]	; (80008cc <GPIOInitForUSART+0xfc>)
 80008ae:	4808      	ldr	r0, [pc, #32]	; (80008d0 <GPIOInitForUSART+0x100>)
 80008b0:	f000 f864 	bl	800097c <USART_WriteText>
		tick++;																			//Systcick Handler for any error
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <GPIOInitForUSART+0x104>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <GPIOInitForUSART+0x104>)
 80008bc:	6013      	str	r3, [r2, #0]
	}
}
 80008be:	bf00      	nop
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	48000800 	.word	0x48000800
 80008cc:	08001c24 	.word	0x08001c24
 80008d0:	40004800 	.word	0x40004800
 80008d4:	2000e0bc 	.word	0x2000e0bc

080008d8 <BSP_USART_Config>:

void BSP_USART_Config(USART_TypeDef * USARTx){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	//USART1->BRR = (uint16_t)(SystemCoreClock/USART_BAUD);								// 4MHz/115200 = 0x23, 4MHz/9600 = 0x1A1
	USARTx->BRR = 0x23;																	// BaudRate 115200
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2223      	movs	r2, #35	; 0x23
 80008e4:	60da      	str	r2, [r3, #12]
	USARTx->CR1 |= 1U << 2;																// Rx enable
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f043 0204 	orr.w	r2, r3, #4
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	601a      	str	r2, [r3, #0]
	USARTx->CR1 |= 1U << 3;																// Tx enable
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f043 0208 	orr.w	r2, r3, #8
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	601a      	str	r2, [r3, #0]
	USARTx->CR1 |= 1U << 5;																// Rx interrupt enable
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f043 0220 	orr.w	r2, r3, #32
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	601a      	str	r2, [r3, #0]
	USARTx->CR1 |= 0U << 10;															// Parity control disable
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	601a      	str	r2, [r3, #0]
	USARTx->CR1 |= 0U << 12;															// Word length 8bit
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	601a      	str	r2, [r3, #0]
	USARTx->CR1 |= 0U << 28;															// Start bit 1 ???
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	601a      	str	r2, [r3, #0]
	USARTx->CR2 |= 0U << 12;															// Stop bit 1
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685a      	ldr	r2, [r3, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	605a      	str	r2, [r3, #4]
	USARTx->CR1 |= 1U << 0;																// Usart enable
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f043 0201 	orr.w	r2, r3, #1
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(USART3_IRQn);
 8000936:	2027      	movs	r0, #39	; 0x27
 8000938:	f7ff fe68 	bl	800060c <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART3_IRQn , 1);
 800093c:	2101      	movs	r1, #1
 800093e:	2027      	movs	r0, #39	; 0x27
 8000940:	f7ff fe82 	bl	8000648 <__NVIC_SetPriority>
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <USART_WriteChar>:
	while (!(USART3->ISR & (1U << 5)));  												// Wait until RXNE (RX not empty) bit is set
	uint8_t temp = (USART3->RDR );																					// USART resets the RXNE flag automatically after reading DR
	return temp;																		// Reading USART_RDR automatically clears the RXNE flag
}

void USART_WriteChar(USART_TypeDef * USARTx, uint8_t ch) {								//it can write only one bit char to usartx
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
	USARTx->TDR = (ch & 0x1FF);
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	b29a      	uxth	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	851a      	strh	r2, [r3, #40]	; 0x28
	while (!(USARTx->ISR & USART_ISR_TXE));   											// wait until TXE bit is set
 8000960:	bf00      	nop
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	2b00      	cmp	r3, #0
 800096c:	d0f9      	beq.n	8000962 <USART_WriteChar+0x16>
}
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <USART_WriteText>:

void USART_WriteText(USART_TypeDef * USARTx, char *TransmitData, int length){			//it can write text to usartx
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
	for(int i=0; i<length ; ++i){														//write one by one to TDR
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	e00a      	b.n	80009a4 <USART_WriteText+0x28>
		USART_WriteChar(USARTx, TransmitData[i]);
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	4413      	add	r3, r2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	4619      	mov	r1, r3
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f7ff ffd7 	bl	800094c <USART_WriteChar>
	for(int i=0; i<length ; ++i){														//write one by one to TDR
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	3301      	adds	r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	dbf0      	blt.n	800098e <USART_WriteText+0x12>
	}
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <USART3_SendChar>:

void USART3_SendChar(char Tx)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	while(!(USART3->ISR&0x80));  														// if Tx buffer is full wait
 80009c2:	bf00      	nop
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <USART3_SendChar+0x2c>)
 80009c6:	69db      	ldr	r3, [r3, #28]
 80009c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d0f9      	beq.n	80009c4 <USART3_SendChar+0xc>
	USART3->TDR=Tx;
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <USART3_SendChar+0x2c>)
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	b292      	uxth	r2, r2
 80009d6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	40004800 	.word	0x40004800

080009e8 <USART3_SendTxt>:

void USART3_SendTxt(char *Adr)															//send Tx buffer until txne empty
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	while(*Adr)
 80009f0:	e007      	b.n	8000a02 <USART3_SendTxt+0x1a>
	{
		USART3_SendChar(*Adr);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ffde 	bl	80009b8 <USART3_SendChar>
		Adr++;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3301      	adds	r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
	while(*Adr)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1f3      	bne.n	80009f2 <USART3_SendTxt+0xa>
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <printMessages>:

void printMessages(char *format, ...)
{
 8000a14:	b40f      	push	{r0, r1, r2, r3}
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b09a      	sub	sp, #104	; 0x68
 8000a1a:	af00      	add	r7, sp, #0
	char comingMessage[100];
	va_list vaList;
	va_start(vaList, format);
 8000a1c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a20:	603b      	str	r3, [r7, #0]
	vsprintf(comingMessage, format, vaList);
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fc71 	bl	8001310 <vsiprintf>
	//USART_WriteText(USART3, (uint8_t*)comingMessage, strlen(comingMessage));
	USART3_SendTxt((uint8_t*)comingMessage);
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ffd9 	bl	80009e8 <USART3_SendTxt>
	va_end(vaList);
}
 8000a36:	bf00      	nop
 8000a38:	3768      	adds	r7, #104	; 0x68
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <USART3_IRQHandler>:

void USART3_IRQHandler(void){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	UartInterruptCtr ++;																//hold the how many interrupt 
 8000a48:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <USART3_IRQHandler+0x8c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	4a20      	ldr	r2, [pc, #128]	; (8000ad0 <USART3_IRQHandler+0x8c>)
 8000a50:	6013      	str	r3, [r2, #0]
	ReceivedData = (uint8_t)USART3->RDR;
 8000a52:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <USART3_IRQHandler+0x90>)
 8000a54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <USART3_IRQHandler+0x94>)
 8000a5c:	701a      	strb	r2, [r3, #0]
	USART3->ICR |= 0x8;
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <USART3_IRQHandler+0x90>)
 8000a60:	6a1b      	ldr	r3, [r3, #32]
 8000a62:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <USART3_IRQHandler+0x90>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	6213      	str	r3, [r2, #32]
	USART3->ICR |= 0x1000;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <USART3_IRQHandler+0x90>)
 8000a6c:	6a1b      	ldr	r3, [r3, #32]
 8000a6e:	4a19      	ldr	r2, [pc, #100]	; (8000ad4 <USART3_IRQHandler+0x90>)
 8000a70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a74:	6213      	str	r3, [r2, #32]

	if(UartInterruptCtr==3){															//if 2 selection mode upload mode enable
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <USART3_IRQHandler+0x8c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d112      	bne.n	8000aa4 <USART3_IRQHandler+0x60>
		TempReceiveData = ReceivedData;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <USART3_IRQHandler+0x94>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <USART3_IRQHandler+0x98>)
 8000a86:	701a      	strb	r2, [r3, #0]
		if(TempReceiveData == '6' || TempReceiveData == '7')
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <USART3_IRQHandler+0x98>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b36      	cmp	r3, #54	; 0x36
 8000a90:	d004      	beq.n	8000a9c <USART3_IRQHandler+0x58>
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <USART3_IRQHandler+0x98>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b37      	cmp	r3, #55	; 0x37
 8000a9a:	d116      	bne.n	8000aca <USART3_IRQHandler+0x86>
			UploadModeTrigger = 1;
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <USART3_IRQHandler+0x9c>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
	else if(UartInterruptCtr>3){														//upload mode enabled and u have been upload .bin file
		UploadProgramByteCtr++;
		ReceivedDataArr[0] |= ReceivedData;
		UploadModeEnable();
	}
}
 8000aa2:	e012      	b.n	8000aca <USART3_IRQHandler+0x86>
	else if(UartInterruptCtr>3){														//upload mode enabled and u have been upload .bin file
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <USART3_IRQHandler+0x8c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d90e      	bls.n	8000aca <USART3_IRQHandler+0x86>
		UploadProgramByteCtr++;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <USART3_IRQHandler+0xa0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <USART3_IRQHandler+0xa0>)
 8000ab4:	6013      	str	r3, [r2, #0]
		ReceivedDataArr[0] |= ReceivedData;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <USART3_IRQHandler+0x94>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <USART3_IRQHandler+0xa4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <USART3_IRQHandler+0xa4>)
 8000ac4:	6013      	str	r3, [r2, #0]
		UploadModeEnable();
 8000ac6:	f000 f811 	bl	8000aec <UploadModeEnable>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200000ac 	.word	0x200000ac
 8000ad4:	40004800 	.word	0x40004800
 8000ad8:	2000e0c2 	.word	0x2000e0c2
 8000adc:	2000e0c1 	.word	0x2000e0c1
 8000ae0:	2000e0c0 	.word	0x2000e0c0
 8000ae4:	200000a8 	.word	0x200000a8
 8000ae8:	200000a4 	.word	0x200000a4

08000aec <UploadModeEnable>:


/****************************** WRITE TO RAM RECEİVED FILE FROM USART**********************************/

void UploadModeEnable(void){															//fill the ram by traveling row by column
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	if(RamColumn<4){
 8000af0:	4b4d      	ldr	r3, [pc, #308]	; (8000c28 <UploadModeEnable+0x13c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	f200 8083 	bhi.w	8000c02 <UploadModeEnable+0x116>
		switch(RamColumn){
 8000afc:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <UploadModeEnable+0x13c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	d876      	bhi.n	8000bf4 <UploadModeEnable+0x108>
 8000b06:	a201      	add	r2, pc, #4	; (adr r2, 8000b0c <UploadModeEnable+0x20>)
 8000b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0c:	08000b1d 	.word	0x08000b1d
 8000b10:	08000b51 	.word	0x08000b51
 8000b14:	08000b87 	.word	0x08000b87
 8000b18:	08000bbd 	.word	0x08000bbd
			case 0:
				TempDataArr[RamRow] &=0x00000000;
 8000b1c:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <UploadModeEnable+0x140>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a43      	ldr	r2, [pc, #268]	; (8000c30 <UploadModeEnable+0x144>)
 8000b22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b26:	4a42      	ldr	r2, [pc, #264]	; (8000c30 <UploadModeEnable+0x144>)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				TempDataArr[RamRow] |= ReceivedDataArr[0];
 8000b2e:	4b41      	ldr	r3, [pc, #260]	; (8000c34 <UploadModeEnable+0x148>)
 8000b30:	6819      	ldr	r1, [r3, #0]
 8000b32:	4b3e      	ldr	r3, [pc, #248]	; (8000c2c <UploadModeEnable+0x140>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a3e      	ldr	r2, [pc, #248]	; (8000c30 <UploadModeEnable+0x144>)
 8000b38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	493c      	ldr	r1, [pc, #240]	; (8000c30 <UploadModeEnable+0x144>)
 8000b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ReceivedDataArr[0] &=0x00000000;
 8000b44:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <UploadModeEnable+0x148>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4b3a      	ldr	r3, [pc, #232]	; (8000c34 <UploadModeEnable+0x148>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
				break;
 8000b4e:	e051      	b.n	8000bf4 <UploadModeEnable+0x108>
			case 1:
				TempDataArr[RamRow] &=0x000000FF;
 8000b50:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <UploadModeEnable+0x140>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a36      	ldr	r2, [pc, #216]	; (8000c30 <UploadModeEnable+0x144>)
 8000b56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	4934      	ldr	r1, [pc, #208]	; (8000c30 <UploadModeEnable+0x144>)
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				TempDataArr[RamRow] |= ReceivedDataArr[0]<<8;
 8000b62:	4b34      	ldr	r3, [pc, #208]	; (8000c34 <UploadModeEnable+0x148>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	0219      	lsls	r1, r3, #8
 8000b68:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <UploadModeEnable+0x140>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a30      	ldr	r2, [pc, #192]	; (8000c30 <UploadModeEnable+0x144>)
 8000b6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b72:	430a      	orrs	r2, r1
 8000b74:	492e      	ldr	r1, [pc, #184]	; (8000c30 <UploadModeEnable+0x144>)
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ReceivedDataArr[0] &=0x00000000;
 8000b7a:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <UploadModeEnable+0x148>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <UploadModeEnable+0x148>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
				break;
 8000b84:	e036      	b.n	8000bf4 <UploadModeEnable+0x108>
			case 2:
				TempDataArr[RamRow] &=0x0000FFFF;
 8000b86:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <UploadModeEnable+0x140>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a29      	ldr	r2, [pc, #164]	; (8000c30 <UploadModeEnable+0x144>)
 8000b8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b90:	b292      	uxth	r2, r2
 8000b92:	4927      	ldr	r1, [pc, #156]	; (8000c30 <UploadModeEnable+0x144>)
 8000b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				TempDataArr[RamRow] |= ReceivedDataArr[0]<<16;
 8000b98:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <UploadModeEnable+0x148>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	0419      	lsls	r1, r3, #16
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <UploadModeEnable+0x140>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <UploadModeEnable+0x144>)
 8000ba4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	4921      	ldr	r1, [pc, #132]	; (8000c30 <UploadModeEnable+0x144>)
 8000bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ReceivedDataArr[0] &=0x00000000;
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <UploadModeEnable+0x148>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <UploadModeEnable+0x148>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
				break;
 8000bba:	e01b      	b.n	8000bf4 <UploadModeEnable+0x108>
			case 3:
				TempDataArr[RamRow] &=0x00FFFFFF;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <UploadModeEnable+0x140>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a1b      	ldr	r2, [pc, #108]	; (8000c30 <UploadModeEnable+0x144>)
 8000bc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bc6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000bca:	4919      	ldr	r1, [pc, #100]	; (8000c30 <UploadModeEnable+0x144>)
 8000bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				TempDataArr[RamRow] |= ReceivedDataArr[0]<<24;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <UploadModeEnable+0x148>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	0619      	lsls	r1, r3, #24
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <UploadModeEnable+0x140>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a15      	ldr	r2, [pc, #84]	; (8000c30 <UploadModeEnable+0x144>)
 8000bdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000be0:	430a      	orrs	r2, r1
 8000be2:	4913      	ldr	r1, [pc, #76]	; (8000c30 <UploadModeEnable+0x144>)
 8000be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ReceivedDataArr[0] &=0x00000000;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <UploadModeEnable+0x148>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <UploadModeEnable+0x148>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
				break;
 8000bf2:	bf00      	nop
		}
	RamColumn++;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <UploadModeEnable+0x13c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <UploadModeEnable+0x13c>)
 8000c00:	701a      	strb	r2, [r3, #0]
	}
	if(RamColumn==4){
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <UploadModeEnable+0x13c>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b04      	cmp	r3, #4
 8000c0a:	d107      	bne.n	8000c1c <UploadModeEnable+0x130>
		RamColumn=0;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <UploadModeEnable+0x13c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
		RamRow++;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <UploadModeEnable+0x140>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	3301      	adds	r3, #1
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <UploadModeEnable+0x140>)
 8000c1a:	6013      	str	r3, [r2, #0]
	}
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2000e0c3 	.word	0x2000e0c3
 8000c2c:	2000e0b8 	.word	0x2000e0b8
 8000c30:	200000b4 	.word	0x200000b4
 8000c34:	200000a4 	.word	0x200000a4

08000c38 <SelectionTerminalScreen>:
 * Fist touch u want see the selection terminal. if u dont click any key for 10 second going to default mode.
 * Second touch is u can choose any mode for selection menu.
 * Third touch if u choosed menu 5, upload mode has been enable. select for instead of any app for new app
 * */

void SelectionTerminalScreen(uint32_t time){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	for(int i=0; i<time; i++){
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	e04a      	b.n	8000cdc <SelectionTerminalScreen+0xa4>
		if(ReceivedData!=0){
 8000c46:	4b9a      	ldr	r3, [pc, #616]	; (8000eb0 <SelectionTerminalScreen+0x278>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d03f      	beq.n	8000cd0 <SelectionTerminalScreen+0x98>
			USART_WriteText(USART3,"This screen send to you information for this program \r\n",56);
 8000c50:	2238      	movs	r2, #56	; 0x38
 8000c52:	4998      	ldr	r1, [pc, #608]	; (8000eb4 <SelectionTerminalScreen+0x27c>)
 8000c54:	4898      	ldr	r0, [pc, #608]	; (8000eb8 <SelectionTerminalScreen+0x280>)
 8000c56:	f7ff fe91 	bl	800097c <USART_WriteText>
			USART_WriteText(USART3,"*********************************************************************************************\r\n",95);
 8000c5a:	225f      	movs	r2, #95	; 0x5f
 8000c5c:	4997      	ldr	r1, [pc, #604]	; (8000ebc <SelectionTerminalScreen+0x284>)
 8000c5e:	4896      	ldr	r0, [pc, #600]	; (8000eb8 <SelectionTerminalScreen+0x280>)
 8000c60:	f7ff fe8c 	bl	800097c <USART_WriteText>
			USART_WriteText(USART3,"****************************** Click to 0 for Boot-DEFAULT **********************************\r\n",95);
 8000c64:	225f      	movs	r2, #95	; 0x5f
 8000c66:	4996      	ldr	r1, [pc, #600]	; (8000ec0 <SelectionTerminalScreen+0x288>)
 8000c68:	4893      	ldr	r0, [pc, #588]	; (8000eb8 <SelectionTerminalScreen+0x280>)
 8000c6a:	f7ff fe87 	bl	800097c <USART_WriteText>
			USART_WriteText(USART3,"****************************** Click to 1 for jump APP-1   **********************************\r\n",95);
 8000c6e:	225f      	movs	r2, #95	; 0x5f
 8000c70:	4994      	ldr	r1, [pc, #592]	; (8000ec4 <SelectionTerminalScreen+0x28c>)
 8000c72:	4891      	ldr	r0, [pc, #580]	; (8000eb8 <SelectionTerminalScreen+0x280>)
 8000c74:	f7ff fe82 	bl	800097c <USART_WriteText>
			USART_WriteText(USART3,"****************************** Click to 2 for jump APP-2   **********************************\r\n",95);
 8000c78:	225f      	movs	r2, #95	; 0x5f
 8000c7a:	4993      	ldr	r1, [pc, #588]	; (8000ec8 <SelectionTerminalScreen+0x290>)
 8000c7c:	488e      	ldr	r0, [pc, #568]	; (8000eb8 <SelectionTerminalScreen+0x280>)
 8000c7e:	f7ff fe7d 	bl	800097c <USART_WriteText>
			USART_WriteText(USART3,"****************************** Click to 3 for delete APP-1 **********************************\r\n",95);
 8000c82:	225f      	movs	r2, #95	; 0x5f
 8000c84:	4991      	ldr	r1, [pc, #580]	; (8000ecc <SelectionTerminalScreen+0x294>)
 8000c86:	488c      	ldr	r0, [pc, #560]	; (8000eb8 <SelectionTerminalScreen+0x280>)
 8000c88:	f7ff fe78 	bl	800097c <USART_WriteText>
			USART_WriteText(USART3,"****************************** Click to 4 for delete APP-2 **********************************\r\n",95);
 8000c8c:	225f      	movs	r2, #95	; 0x5f
 8000c8e:	4990      	ldr	r1, [pc, #576]	; (8000ed0 <SelectionTerminalScreen+0x298>)
 8000c90:	4889      	ldr	r0, [pc, #548]	; (8000eb8 <SelectionTerminalScreen+0x280>)
 8000c92:	f7ff fe73 	bl	800097c <USART_WriteText>
			USART_WriteText(USART3,"****************************** Click to 5 for add bin file **********************************\r\n",95);
 8000c96:	225f      	movs	r2, #95	; 0x5f
 8000c98:	498e      	ldr	r1, [pc, #568]	; (8000ed4 <SelectionTerminalScreen+0x29c>)
 8000c9a:	4887      	ldr	r0, [pc, #540]	; (8000eb8 <SelectionTerminalScreen+0x280>)
 8000c9c:	f7ff fe6e 	bl	800097c <USART_WriteText>
			USART_WriteText(USART3,"*********************************************************************************************\r\n",95);
 8000ca0:	225f      	movs	r2, #95	; 0x5f
 8000ca2:	4986      	ldr	r1, [pc, #536]	; (8000ebc <SelectionTerminalScreen+0x284>)
 8000ca4:	4884      	ldr	r0, [pc, #528]	; (8000eb8 <SelectionTerminalScreen+0x280>)
 8000ca6:	f7ff fe69 	bl	800097c <USART_WriteText>
			USART_WriteText(USART3,"Please choose between 0-5 on the menu, then click keypad\r\n",60);
 8000caa:	223c      	movs	r2, #60	; 0x3c
 8000cac:	498a      	ldr	r1, [pc, #552]	; (8000ed8 <SelectionTerminalScreen+0x2a0>)
 8000cae:	4882      	ldr	r0, [pc, #520]	; (8000eb8 <SelectionTerminalScreen+0x280>)
 8000cb0:	f7ff fe64 	bl	800097c <USART_WriteText>
			ReceivedData=0;
 8000cb4:	4b7e      	ldr	r3, [pc, #504]	; (8000eb0 <SelectionTerminalScreen+0x278>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
			while(!ReceivedData);
 8000cba:	bf00      	nop
 8000cbc:	4b7c      	ldr	r3, [pc, #496]	; (8000eb0 <SelectionTerminalScreen+0x278>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0fa      	beq.n	8000cbc <SelectionTerminalScreen+0x84>
			if(ReceivedData!=0){
 8000cc6:	4b7a      	ldr	r3, [pc, #488]	; (8000eb0 <SelectionTerminalScreen+0x278>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10a      	bne.n	8000ce6 <SelectionTerminalScreen+0xae>
				break;
			}
		}
		delay_ms(400000);
 8000cd0:	4882      	ldr	r0, [pc, #520]	; (8000edc <SelectionTerminalScreen+0x2a4>)
 8000cd2:	f7ff fce3 	bl	800069c <delay_ms>
	for(int i=0; i<time; i++){
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d8b0      	bhi.n	8000c46 <SelectionTerminalScreen+0xe>
 8000ce4:	e000      	b.n	8000ce8 <SelectionTerminalScreen+0xb0>
				break;
 8000ce6:	bf00      	nop
	}
	switch(ReceivedData){
 8000ce8:	4b71      	ldr	r3, [pc, #452]	; (8000eb0 <SelectionTerminalScreen+0x278>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b35      	cmp	r3, #53	; 0x35
 8000cf0:	f200 80d2 	bhi.w	8000e98 <SelectionTerminalScreen+0x260>
 8000cf4:	a201      	add	r2, pc, #4	; (adr r2, 8000cfc <SelectionTerminalScreen+0xc4>)
 8000cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfa:	bf00      	nop
 8000cfc:	08000dd5 	.word	0x08000dd5
 8000d00:	08000e99 	.word	0x08000e99
 8000d04:	08000e99 	.word	0x08000e99
 8000d08:	08000e99 	.word	0x08000e99
 8000d0c:	08000e99 	.word	0x08000e99
 8000d10:	08000e99 	.word	0x08000e99
 8000d14:	08000e99 	.word	0x08000e99
 8000d18:	08000e99 	.word	0x08000e99
 8000d1c:	08000e99 	.word	0x08000e99
 8000d20:	08000e99 	.word	0x08000e99
 8000d24:	08000e99 	.word	0x08000e99
 8000d28:	08000e99 	.word	0x08000e99
 8000d2c:	08000e99 	.word	0x08000e99
 8000d30:	08000e99 	.word	0x08000e99
 8000d34:	08000e99 	.word	0x08000e99
 8000d38:	08000e99 	.word	0x08000e99
 8000d3c:	08000e99 	.word	0x08000e99
 8000d40:	08000e99 	.word	0x08000e99
 8000d44:	08000e99 	.word	0x08000e99
 8000d48:	08000e99 	.word	0x08000e99
 8000d4c:	08000e99 	.word	0x08000e99
 8000d50:	08000e99 	.word	0x08000e99
 8000d54:	08000e99 	.word	0x08000e99
 8000d58:	08000e99 	.word	0x08000e99
 8000d5c:	08000e99 	.word	0x08000e99
 8000d60:	08000e99 	.word	0x08000e99
 8000d64:	08000e99 	.word	0x08000e99
 8000d68:	08000e99 	.word	0x08000e99
 8000d6c:	08000e99 	.word	0x08000e99
 8000d70:	08000e99 	.word	0x08000e99
 8000d74:	08000e99 	.word	0x08000e99
 8000d78:	08000e99 	.word	0x08000e99
 8000d7c:	08000e99 	.word	0x08000e99
 8000d80:	08000e99 	.word	0x08000e99
 8000d84:	08000e99 	.word	0x08000e99
 8000d88:	08000e99 	.word	0x08000e99
 8000d8c:	08000e99 	.word	0x08000e99
 8000d90:	08000e99 	.word	0x08000e99
 8000d94:	08000e99 	.word	0x08000e99
 8000d98:	08000e99 	.word	0x08000e99
 8000d9c:	08000e99 	.word	0x08000e99
 8000da0:	08000e99 	.word	0x08000e99
 8000da4:	08000e99 	.word	0x08000e99
 8000da8:	08000e99 	.word	0x08000e99
 8000dac:	08000e99 	.word	0x08000e99
 8000db0:	08000e99 	.word	0x08000e99
 8000db4:	08000e99 	.word	0x08000e99
 8000db8:	08000e99 	.word	0x08000e99
 8000dbc:	08000de1 	.word	0x08000de1
 8000dc0:	08000ded 	.word	0x08000ded
 8000dc4:	08000df9 	.word	0x08000df9
 8000dc8:	08000e05 	.word	0x08000e05
 8000dcc:	08000e19 	.word	0x08000e19
 8000dd0:	08000e2d 	.word	0x08000e2d
	case 0:
		printMessages("BL DEBUG MESG: Not pressed and going to default selection\r\n");
 8000dd4:	4842      	ldr	r0, [pc, #264]	; (8000ee0 <SelectionTerminalScreen+0x2a8>)
 8000dd6:	f7ff fe1d 	bl	8000a14 <printMessages>
		bootloader_default_mode();
 8000dda:	f7ff fa59 	bl	8000290 <bootloader_default_mode>
		break;
 8000dde:	e05f      	b.n	8000ea0 <SelectionTerminalScreen+0x268>
	case '0':
		printMessages("BL DEBUG MESG: 0 is pressed and going to bootloader\r\n");
 8000de0:	4840      	ldr	r0, [pc, #256]	; (8000ee4 <SelectionTerminalScreen+0x2ac>)
 8000de2:	f7ff fe17 	bl	8000a14 <printMessages>
		bootloader_default_mode();
 8000de6:	f7ff fa53 	bl	8000290 <bootloader_default_mode>
		break;
 8000dea:	e059      	b.n	8000ea0 <SelectionTerminalScreen+0x268>
	case '1':
		printMessages("BL DEBUG MESG: 1 is pressed and going to user APP 1\r\n");
 8000dec:	483e      	ldr	r0, [pc, #248]	; (8000ee8 <SelectionTerminalScreen+0x2b0>)
 8000dee:	f7ff fe11 	bl	8000a14 <printMessages>
		bootloader_jump_to_user_app1();
 8000df2:	f7ff fa69 	bl	80002c8 <bootloader_jump_to_user_app1>
		break;
 8000df6:	e053      	b.n	8000ea0 <SelectionTerminalScreen+0x268>
	case '2':
		printMessages("BL DEBUG MESG: 2 is pressed and going to user APP 2\r\n");
 8000df8:	483c      	ldr	r0, [pc, #240]	; (8000eec <SelectionTerminalScreen+0x2b4>)
 8000dfa:	f7ff fe0b 	bl	8000a14 <printMessages>
		bootloader_jump_to_user_app2();
 8000dfe:	f7ff fa7f 	bl	8000300 <bootloader_jump_to_user_app2>
		break;
 8000e02:	e04d      	b.n	8000ea0 <SelectionTerminalScreen+0x268>
	case '3':
		printMessages("BL DEBUG MESG: 3 is pressed and going to delete APP-1\r\n");
 8000e04:	483a      	ldr	r0, [pc, #232]	; (8000ef0 <SelectionTerminalScreen+0x2b8>)
 8000e06:	f7ff fe05 	bl	8000a14 <printMessages>
		BSP_FLASH_EraseRoutine(1);
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f7ff fb46 	bl	800049c <BSP_FLASH_EraseRoutine>
		printMessages("BL DEBUG MESG: APP-1 is deleted\r\n");
 8000e10:	4838      	ldr	r0, [pc, #224]	; (8000ef4 <SelectionTerminalScreen+0x2bc>)
 8000e12:	f7ff fdff 	bl	8000a14 <printMessages>
		break;
 8000e16:	e043      	b.n	8000ea0 <SelectionTerminalScreen+0x268>
	case '4':
		printMessages("BL DEBUG MESG: 4 is pressed and going to delete APP-2\r\n");
 8000e18:	4837      	ldr	r0, [pc, #220]	; (8000ef8 <SelectionTerminalScreen+0x2c0>)
 8000e1a:	f7ff fdfb 	bl	8000a14 <printMessages>
		BSP_FLASH_EraseRoutine(2);
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f7ff fb3c 	bl	800049c <BSP_FLASH_EraseRoutine>
		printMessages("BL DEBUG MESG: APP-2 is deleted\r\n");
 8000e24:	4835      	ldr	r0, [pc, #212]	; (8000efc <SelectionTerminalScreen+0x2c4>)
 8000e26:	f7ff fdf5 	bl	8000a14 <printMessages>
		break;
 8000e2a:	e039      	b.n	8000ea0 <SelectionTerminalScreen+0x268>
	case '5':
		printMessages("BL DEBUG MESG: 5 is pressed and now u can add bin file\r\n");
 8000e2c:	4834      	ldr	r0, [pc, #208]	; (8000f00 <SelectionTerminalScreen+0x2c8>)
 8000e2e:	f7ff fdf1 	bl	8000a14 <printMessages>
		printMessages("BL DEBUG MESG: Please choose where you want to upload this file\r\n");
 8000e32:	4834      	ldr	r0, [pc, #208]	; (8000f04 <SelectionTerminalScreen+0x2cc>)
 8000e34:	f7ff fdee 	bl	8000a14 <printMessages>
		printMessages("BL DEBUG MESG: Click 6 for APP-1\r\n");
 8000e38:	4833      	ldr	r0, [pc, #204]	; (8000f08 <SelectionTerminalScreen+0x2d0>)
 8000e3a:	f7ff fdeb 	bl	8000a14 <printMessages>
		printMessages("BL DEBUG MESG: Click 7 for APP-2\r\n");
 8000e3e:	4833      	ldr	r0, [pc, #204]	; (8000f0c <SelectionTerminalScreen+0x2d4>)
 8000e40:	f7ff fde8 	bl	8000a14 <printMessages>
		ReceivedData=0;
 8000e44:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <SelectionTerminalScreen+0x278>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
		while(!(ReceivedData));
 8000e4a:	bf00      	nop
 8000e4c:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <SelectionTerminalScreen+0x278>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0fa      	beq.n	8000e4c <SelectionTerminalScreen+0x214>
		if(ReceivedData=='6'){
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <SelectionTerminalScreen+0x278>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b36      	cmp	r3, #54	; 0x36
 8000e5e:	d109      	bne.n	8000e74 <SelectionTerminalScreen+0x23c>
			//BSP_FLASH_EraseRoutine(1);
			printMessages("BL DEBUG MESG: Now u can add ur bin file for APP-1\r\n");
 8000e60:	482b      	ldr	r0, [pc, #172]	; (8000f10 <SelectionTerminalScreen+0x2d8>)
 8000e62:	f7ff fdd7 	bl	8000a14 <printMessages>
			while(!UploadModeTrigger);
 8000e66:	bf00      	nop
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <SelectionTerminalScreen+0x2dc>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0fa      	beq.n	8000e68 <SelectionTerminalScreen+0x230>
			while(!UploadModeTrigger);
		}
		else{
			BSP_FLASH_Lock();         														//wrong input guard
		}
		break;
 8000e72:	e015      	b.n	8000ea0 <SelectionTerminalScreen+0x268>
		else if(ReceivedData=='7'){
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <SelectionTerminalScreen+0x278>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b37      	cmp	r3, #55	; 0x37
 8000e7c:	d109      	bne.n	8000e92 <SelectionTerminalScreen+0x25a>
			printMessages("BL DEBUG MESG: Now u can add ur bin file for APP-2\r\n");
 8000e7e:	4826      	ldr	r0, [pc, #152]	; (8000f18 <SelectionTerminalScreen+0x2e0>)
 8000e80:	f7ff fdc8 	bl	8000a14 <printMessages>
			while(!UploadModeTrigger);
 8000e84:	bf00      	nop
 8000e86:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <SelectionTerminalScreen+0x2dc>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0fa      	beq.n	8000e86 <SelectionTerminalScreen+0x24e>
		break;
 8000e90:	e006      	b.n	8000ea0 <SelectionTerminalScreen+0x268>
			BSP_FLASH_Lock();         														//wrong input guard
 8000e92:	f7ff fa51 	bl	8000338 <BSP_FLASH_Lock>
		break;
 8000e96:	e003      	b.n	8000ea0 <SelectionTerminalScreen+0x268>
	default:
		printMessages("BL DEBUG MESG: PLEASE RESET THE CHIP AND SELECT THE MENU WHAT YOU WANT --> SELECTION ERROR DETECTED!!!!!\r\n");
 8000e98:	4820      	ldr	r0, [pc, #128]	; (8000f1c <SelectionTerminalScreen+0x2e4>)
 8000e9a:	f7ff fdbb 	bl	8000a14 <printMessages>
		break;
 8000e9e:	bf00      	nop
	}
	ReceivedData=0;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <SelectionTerminalScreen+0x278>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000e0c2 	.word	0x2000e0c2
 8000eb4:	08001c3c 	.word	0x08001c3c
 8000eb8:	40004800 	.word	0x40004800
 8000ebc:	08001c74 	.word	0x08001c74
 8000ec0:	08001cd4 	.word	0x08001cd4
 8000ec4:	08001d34 	.word	0x08001d34
 8000ec8:	08001d94 	.word	0x08001d94
 8000ecc:	08001df4 	.word	0x08001df4
 8000ed0:	08001e54 	.word	0x08001e54
 8000ed4:	08001eb4 	.word	0x08001eb4
 8000ed8:	08001f14 	.word	0x08001f14
 8000edc:	00061a80 	.word	0x00061a80
 8000ee0:	08001f50 	.word	0x08001f50
 8000ee4:	08001f8c 	.word	0x08001f8c
 8000ee8:	08001fc4 	.word	0x08001fc4
 8000eec:	08001ffc 	.word	0x08001ffc
 8000ef0:	08002034 	.word	0x08002034
 8000ef4:	0800206c 	.word	0x0800206c
 8000ef8:	08002090 	.word	0x08002090
 8000efc:	080020c8 	.word	0x080020c8
 8000f00:	080020ec 	.word	0x080020ec
 8000f04:	08002128 	.word	0x08002128
 8000f08:	0800216c 	.word	0x0800216c
 8000f0c:	08002190 	.word	0x08002190
 8000f10:	080021b4 	.word	0x080021b4
 8000f14:	2000e0c0 	.word	0x2000e0c0
 8000f18:	080021ec 	.word	0x080021ec
 8000f1c:	08002224 	.word	0x08002224

08000f20 <WriteToAddressApp1>:


/******************************UPLOAD MODE WRITE FLASH**********************************/

void WriteToAddressApp1(uint32_t *WritingData){												//write app1 to app1 address
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	BSP_FLASH_UnLock();
 8000f28:	f7ff fa16 	bl	8000358 <BSP_FLASH_UnLock>
	while (FlashCtr <= FlashProgramCtr){
 8000f2c:	e014      	b.n	8000f58 <WriteToAddressApp1+0x38>
		BSP_FlashProgram(app1_address,WritingData[FlashCtr]);
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <WriteToAddressApp1+0x58>)
 8000f30:	6818      	ldr	r0, [r3, #0]
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <WriteToAddressApp1+0x5c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fb2e 	bl	80005a0 <BSP_FlashProgram>
		app1_address = app1_address + 4;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <WriteToAddressApp1+0x58>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <WriteToAddressApp1+0x58>)
 8000f4c:	6013      	str	r3, [r2, #0]
		FlashCtr++;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <WriteToAddressApp1+0x5c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3301      	adds	r3, #1
 8000f54:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <WriteToAddressApp1+0x5c>)
 8000f56:	6013      	str	r3, [r2, #0]
	while (FlashCtr <= FlashProgramCtr){
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <WriteToAddressApp1+0x5c>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <WriteToAddressApp1+0x60>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d9e4      	bls.n	8000f2e <WriteToAddressApp1+0xe>
	}
	FLASH->CR |= 0 << 0;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <WriteToAddressApp1+0x64>)
 8000f66:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <WriteToAddressApp1+0x64>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	6153      	str	r3, [r2, #20]
	BSP_FLASH_Lock();
 8000f6c:	f7ff f9e4 	bl	8000338 <BSP_FLASH_Lock>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	2000e0b4 	.word	0x2000e0b4
 8000f80:	200000b0 	.word	0x200000b0
 8000f84:	40022000 	.word	0x40022000

08000f88 <WriteToAddressApp2>:

void WriteToAddressApp2(uint32_t *WritingData){												//write app2 to app2 address
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	BSP_FLASH_UnLock();
 8000f90:	f7ff f9e2 	bl	8000358 <BSP_FLASH_UnLock>
	while (FlashCtr <= FlashProgramCtr){
 8000f94:	e014      	b.n	8000fc0 <WriteToAddressApp2+0x38>
		BSP_FlashProgram(app2_address,WritingData[FlashCtr]);
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <WriteToAddressApp2+0x58>)
 8000f98:	6818      	ldr	r0, [r3, #0]
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <WriteToAddressApp2+0x5c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f7ff fafa 	bl	80005a0 <BSP_FlashProgram>
		app2_address = app2_address + 4;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <WriteToAddressApp2+0x58>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <WriteToAddressApp2+0x58>)
 8000fb4:	6013      	str	r3, [r2, #0]
		FlashCtr++;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <WriteToAddressApp2+0x5c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <WriteToAddressApp2+0x5c>)
 8000fbe:	6013      	str	r3, [r2, #0]
	while (FlashCtr <= FlashProgramCtr){
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <WriteToAddressApp2+0x5c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <WriteToAddressApp2+0x60>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d9e4      	bls.n	8000f96 <WriteToAddressApp2+0xe>
	}
	FLASH->CR |= 0 << 0;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <WriteToAddressApp2+0x64>)
 8000fce:	4a07      	ldr	r2, [pc, #28]	; (8000fec <WriteToAddressApp2+0x64>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	6153      	str	r3, [r2, #20]
	BSP_FLASH_Lock();
 8000fd4:	f7ff f9b0 	bl	8000338 <BSP_FLASH_Lock>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000004 	.word	0x20000004
 8000fe4:	2000e0b4 	.word	0x2000e0b4
 8000fe8:	200000b0 	.word	0x200000b0
 8000fec:	40022000 	.word	0x40022000

08000ff0 <DoubleWordWriteFlashCalculator>:

void DoubleWordWriteFlashCalculator(void){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	if(UartInterruptCtr>2 & UploadProgramByteCtr!=0){
 8000ff4:	4b52      	ldr	r3, [pc, #328]	; (8001140 <DoubleWordWriteFlashCalculator+0x150>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	bf8c      	ite	hi
 8000ffc:	2301      	movhi	r3, #1
 8000ffe:	2300      	movls	r3, #0
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b50      	ldr	r3, [pc, #320]	; (8001144 <DoubleWordWriteFlashCalculator+0x154>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	bf14      	ite	ne
 800100a:	2301      	movne	r3, #1
 800100c:	2300      	moveq	r3, #0
 800100e:	b2db      	uxtb	r3, r3
 8001010:	4013      	ands	r3, r2
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 808c 	beq.w	8001132 <DoubleWordWriteFlashCalculator+0x142>
		delay_ms(2000000);
 800101a:	484b      	ldr	r0, [pc, #300]	; (8001148 <DoubleWordWriteFlashCalculator+0x158>)
 800101c:	f7ff fb3e 	bl	800069c <delay_ms>
		switch((UploadProgramByteCtr/4)%8){													//4 is flash memory column, 8 is doubleword
 8001020:	4b48      	ldr	r3, [pc, #288]	; (8001144 <DoubleWordWriteFlashCalculator+0x154>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	2b07      	cmp	r3, #7
 800102c:	d849      	bhi.n	80010c2 <DoubleWordWriteFlashCalculator+0xd2>
 800102e:	a201      	add	r2, pc, #4	; (adr r2, 8001034 <DoubleWordWriteFlashCalculator+0x44>)
 8001030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001034:	08001055 	.word	0x08001055
 8001038:	08001061 	.word	0x08001061
 800103c:	0800106f 	.word	0x0800106f
 8001040:	0800107d 	.word	0x0800107d
 8001044:	0800108b 	.word	0x0800108b
 8001048:	08001099 	.word	0x08001099
 800104c:	080010a7 	.word	0x080010a7
 8001050:	080010b5 	.word	0x080010b5
			case 0:
				FlashProgramCtr=(UploadProgramByteCtr/4);
 8001054:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <DoubleWordWriteFlashCalculator+0x154>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	4a3c      	ldr	r2, [pc, #240]	; (800114c <DoubleWordWriteFlashCalculator+0x15c>)
 800105c:	6013      	str	r3, [r2, #0]
				break;
 800105e:	e030      	b.n	80010c2 <DoubleWordWriteFlashCalculator+0xd2>
			case 1:
				FlashProgramCtr=(UploadProgramByteCtr/4)+7;
 8001060:	4b38      	ldr	r3, [pc, #224]	; (8001144 <DoubleWordWriteFlashCalculator+0x154>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3307      	adds	r3, #7
 8001068:	4a38      	ldr	r2, [pc, #224]	; (800114c <DoubleWordWriteFlashCalculator+0x15c>)
 800106a:	6013      	str	r3, [r2, #0]
				break;
 800106c:	e029      	b.n	80010c2 <DoubleWordWriteFlashCalculator+0xd2>
			case 2:
				FlashProgramCtr=(UploadProgramByteCtr/4)+6;
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <DoubleWordWriteFlashCalculator+0x154>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3306      	adds	r3, #6
 8001076:	4a35      	ldr	r2, [pc, #212]	; (800114c <DoubleWordWriteFlashCalculator+0x15c>)
 8001078:	6013      	str	r3, [r2, #0]
				break;
 800107a:	e022      	b.n	80010c2 <DoubleWordWriteFlashCalculator+0xd2>
			case 3:
				FlashProgramCtr=(UploadProgramByteCtr/4)+5;
 800107c:	4b31      	ldr	r3, [pc, #196]	; (8001144 <DoubleWordWriteFlashCalculator+0x154>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3305      	adds	r3, #5
 8001084:	4a31      	ldr	r2, [pc, #196]	; (800114c <DoubleWordWriteFlashCalculator+0x15c>)
 8001086:	6013      	str	r3, [r2, #0]
				break;
 8001088:	e01b      	b.n	80010c2 <DoubleWordWriteFlashCalculator+0xd2>
			case 4:
				FlashProgramCtr=(UploadProgramByteCtr/4)+4;
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <DoubleWordWriteFlashCalculator+0x154>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3304      	adds	r3, #4
 8001092:	4a2e      	ldr	r2, [pc, #184]	; (800114c <DoubleWordWriteFlashCalculator+0x15c>)
 8001094:	6013      	str	r3, [r2, #0]
				break;
 8001096:	e014      	b.n	80010c2 <DoubleWordWriteFlashCalculator+0xd2>
			case 5:
				FlashProgramCtr=(UploadProgramByteCtr/4)+3;
 8001098:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <DoubleWordWriteFlashCalculator+0x154>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3303      	adds	r3, #3
 80010a0:	4a2a      	ldr	r2, [pc, #168]	; (800114c <DoubleWordWriteFlashCalculator+0x15c>)
 80010a2:	6013      	str	r3, [r2, #0]
				break;
 80010a4:	e00d      	b.n	80010c2 <DoubleWordWriteFlashCalculator+0xd2>
			case 6:
				FlashProgramCtr=(UploadProgramByteCtr/4)+2;
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <DoubleWordWriteFlashCalculator+0x154>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	4a27      	ldr	r2, [pc, #156]	; (800114c <DoubleWordWriteFlashCalculator+0x15c>)
 80010b0:	6013      	str	r3, [r2, #0]
				break;
 80010b2:	e006      	b.n	80010c2 <DoubleWordWriteFlashCalculator+0xd2>
			case 7:
				FlashProgramCtr=(UploadProgramByteCtr/4)+1;
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <DoubleWordWriteFlashCalculator+0x154>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a23      	ldr	r2, [pc, #140]	; (800114c <DoubleWordWriteFlashCalculator+0x15c>)
 80010be:	6013      	str	r3, [r2, #0]
				break;
 80010c0:	bf00      	nop
		}
		switch(TempReceiveData){
 80010c2:	4b23      	ldr	r3, [pc, #140]	; (8001150 <DoubleWordWriteFlashCalculator+0x160>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b36      	cmp	r3, #54	; 0x36
 80010ca:	d002      	beq.n	80010d2 <DoubleWordWriteFlashCalculator+0xe2>
 80010cc:	2b37      	cmp	r3, #55	; 0x37
 80010ce:	d016      	beq.n	80010fe <DoubleWordWriteFlashCalculator+0x10e>
 80010d0:	e02b      	b.n	800112a <DoubleWordWriteFlashCalculator+0x13a>
			case '6':
				WriteToAddressApp1(TempDataArr);
 80010d2:	4820      	ldr	r0, [pc, #128]	; (8001154 <DoubleWordWriteFlashCalculator+0x164>)
 80010d4:	f7ff ff24 	bl	8000f20 <WriteToAddressApp1>
				BitCtr++;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <DoubleWordWriteFlashCalculator+0x168>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <DoubleWordWriteFlashCalculator+0x168>)
 80010e0:	6013      	str	r3, [r2, #0]
				if(BitCtr==(UploadProgramByteCtr/1024)){
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <DoubleWordWriteFlashCalculator+0x154>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	0a9a      	lsrs	r2, r3, #10
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <DoubleWordWriteFlashCalculator+0x168>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d122      	bne.n	8001136 <DoubleWordWriteFlashCalculator+0x146>
					delay_ms(400000);
 80010f0:	481a      	ldr	r0, [pc, #104]	; (800115c <DoubleWordWriteFlashCalculator+0x16c>)
 80010f2:	f7ff fad3 	bl	800069c <delay_ms>
					printMessages("Upload completed \r\n");
 80010f6:	481a      	ldr	r0, [pc, #104]	; (8001160 <DoubleWordWriteFlashCalculator+0x170>)
 80010f8:	f7ff fc8c 	bl	8000a14 <printMessages>
					break;
 80010fc:	e01e      	b.n	800113c <DoubleWordWriteFlashCalculator+0x14c>
				}
				break;
			case '7':
				WriteToAddressApp2(TempDataArr);
 80010fe:	4815      	ldr	r0, [pc, #84]	; (8001154 <DoubleWordWriteFlashCalculator+0x164>)
 8001100:	f7ff ff42 	bl	8000f88 <WriteToAddressApp2>
				BitCtr++;
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <DoubleWordWriteFlashCalculator+0x168>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	4a13      	ldr	r2, [pc, #76]	; (8001158 <DoubleWordWriteFlashCalculator+0x168>)
 800110c:	6013      	str	r3, [r2, #0]
				if(BitCtr==(UploadProgramByteCtr/1024)){
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <DoubleWordWriteFlashCalculator+0x154>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	0a9a      	lsrs	r2, r3, #10
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <DoubleWordWriteFlashCalculator+0x168>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d10e      	bne.n	800113a <DoubleWordWriteFlashCalculator+0x14a>
					delay_ms(400000);
 800111c:	480f      	ldr	r0, [pc, #60]	; (800115c <DoubleWordWriteFlashCalculator+0x16c>)
 800111e:	f7ff fabd 	bl	800069c <delay_ms>
					printMessages("Upload completed \r\n");
 8001122:	480f      	ldr	r0, [pc, #60]	; (8001160 <DoubleWordWriteFlashCalculator+0x170>)
 8001124:	f7ff fc76 	bl	8000a14 <printMessages>
					break;
 8001128:	e008      	b.n	800113c <DoubleWordWriteFlashCalculator+0x14c>
				}
				break;
			default:
				printMessages("BL ERR MESG : Flash Writing Error\r\nPlease reset this chip\r\n");
 800112a:	480e      	ldr	r0, [pc, #56]	; (8001164 <DoubleWordWriteFlashCalculator+0x174>)
 800112c:	f7ff fc72 	bl	8000a14 <printMessages>
				break;
 8001130:	e004      	b.n	800113c <DoubleWordWriteFlashCalculator+0x14c>
		}
	}
 8001132:	bf00      	nop
 8001134:	e002      	b.n	800113c <DoubleWordWriteFlashCalculator+0x14c>
				break;
 8001136:	bf00      	nop
 8001138:	e000      	b.n	800113c <DoubleWordWriteFlashCalculator+0x14c>
				break;
 800113a:	bf00      	nop
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200000ac 	.word	0x200000ac
 8001144:	200000a8 	.word	0x200000a8
 8001148:	001e8480 	.word	0x001e8480
 800114c:	200000b0 	.word	0x200000b0
 8001150:	2000e0c1 	.word	0x2000e0c1
 8001154:	200000b4 	.word	0x200000b4
 8001158:	2000e0c4 	.word	0x2000e0c4
 800115c:	00061a80 	.word	0x00061a80
 8001160:	08002290 	.word	0x08002290
 8001164:	080022a4 	.word	0x080022a4

08001168 <main>:


/******************************MAIN FUNCTION**********************************/

int main(void){
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	//USART3 enable
	RCCInitForUSART('C');
 800116c:	2043      	movs	r0, #67	; 0x43
 800116e:	f7ff fae3 	bl	8000738 <RCCInitForUSART>
	GPIOInitForUSART('C', 5, 4);
 8001172:	2204      	movs	r2, #4
 8001174:	2105      	movs	r1, #5
 8001176:	2043      	movs	r0, #67	; 0x43
 8001178:	f7ff fb2a 	bl	80007d0 <GPIOInitForUSART>
	BSP_USART_Config(USART3);
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <main+0x38>)
 800117e:	f7ff fbab 	bl	80008d8 <BSP_USART_Config>

	printMessages(" Press any key to selection terminal\r\n");
 8001182:	4808      	ldr	r0, [pc, #32]	; (80011a4 <main+0x3c>)
 8001184:	f7ff fc46 	bl	8000a14 <printMessages>
	USART_WriteText(USART3,"  If there is no input 10 sec, the system default will be activated.\r\n",72);
 8001188:	2248      	movs	r2, #72	; 0x48
 800118a:	4907      	ldr	r1, [pc, #28]	; (80011a8 <main+0x40>)
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <main+0x38>)
 800118e:	f7ff fbf5 	bl	800097c <USART_WriteText>

	SelectionTerminalScreen(10);
 8001192:	200a      	movs	r0, #10
 8001194:	f7ff fd50 	bl	8000c38 <SelectionTerminalScreen>

	while(1){
		DoubleWordWriteFlashCalculator();
 8001198:	f7ff ff2a 	bl	8000ff0 <DoubleWordWriteFlashCalculator>
 800119c:	e7fc      	b.n	8001198 <main+0x30>
 800119e:	bf00      	nop
 80011a0:	40004800 	.word	0x40004800
 80011a4:	080022e0 	.word	0x080022e0
 80011a8:	08002308 	.word	0x08002308

080011ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <_sbrk+0x5c>)
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <_sbrk+0x60>)
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <_sbrk+0x64>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <_sbrk+0x68>)
 80011cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d207      	bcs.n	80011ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011dc:	f000 f858 	bl	8001290 <__errno>
 80011e0:	4603      	mov	r3, r0
 80011e2:	220c      	movs	r2, #12
 80011e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	e009      	b.n	8001200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <_sbrk+0x64>)
 80011fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20050000 	.word	0x20050000
 800120c:	00000400 	.word	0x00000400
 8001210:	2000e0c8 	.word	0x2000e0c8
 8001214:	2000e0e0 	.word	0x2000e0e0

08001218 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <SystemInit+0x20>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <SystemInit+0x20>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800123e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001240:	f7ff ffea 	bl	8001218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001244:	480c      	ldr	r0, [pc, #48]	; (8001278 <LoopForever+0x6>)
  ldr r1, =_edata
 8001246:	490d      	ldr	r1, [pc, #52]	; (800127c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <LoopForever+0xe>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800125c:	4c0a      	ldr	r4, [pc, #40]	; (8001288 <LoopForever+0x16>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800126a:	f000 f817 	bl	800129c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126e:	f7ff ff7b 	bl	8001168 <main>

08001272 <LoopForever>:

LoopForever:
    b LoopForever
 8001272:	e7fe      	b.n	8001272 <LoopForever>
  ldr   r0, =_estack
 8001274:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001280:	0800238c 	.word	0x0800238c
  ldr r2, =_sbss
 8001284:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001288:	2000e0dc 	.word	0x2000e0dc

0800128c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC1_2_IRQHandler>
	...

08001290 <__errno>:
 8001290:	4b01      	ldr	r3, [pc, #4]	; (8001298 <__errno+0x8>)
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008

0800129c <__libc_init_array>:
 800129c:	b570      	push	{r4, r5, r6, lr}
 800129e:	4d0d      	ldr	r5, [pc, #52]	; (80012d4 <__libc_init_array+0x38>)
 80012a0:	4c0d      	ldr	r4, [pc, #52]	; (80012d8 <__libc_init_array+0x3c>)
 80012a2:	1b64      	subs	r4, r4, r5
 80012a4:	10a4      	asrs	r4, r4, #2
 80012a6:	2600      	movs	r6, #0
 80012a8:	42a6      	cmp	r6, r4
 80012aa:	d109      	bne.n	80012c0 <__libc_init_array+0x24>
 80012ac:	4d0b      	ldr	r5, [pc, #44]	; (80012dc <__libc_init_array+0x40>)
 80012ae:	4c0c      	ldr	r4, [pc, #48]	; (80012e0 <__libc_init_array+0x44>)
 80012b0:	f000 fc86 	bl	8001bc0 <_init>
 80012b4:	1b64      	subs	r4, r4, r5
 80012b6:	10a4      	asrs	r4, r4, #2
 80012b8:	2600      	movs	r6, #0
 80012ba:	42a6      	cmp	r6, r4
 80012bc:	d105      	bne.n	80012ca <__libc_init_array+0x2e>
 80012be:	bd70      	pop	{r4, r5, r6, pc}
 80012c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80012c4:	4798      	blx	r3
 80012c6:	3601      	adds	r6, #1
 80012c8:	e7ee      	b.n	80012a8 <__libc_init_array+0xc>
 80012ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80012ce:	4798      	blx	r3
 80012d0:	3601      	adds	r6, #1
 80012d2:	e7f2      	b.n	80012ba <__libc_init_array+0x1e>
 80012d4:	08002384 	.word	0x08002384
 80012d8:	08002384 	.word	0x08002384
 80012dc:	08002384 	.word	0x08002384
 80012e0:	08002388 	.word	0x08002388

080012e4 <_vsiprintf_r>:
 80012e4:	b500      	push	{lr}
 80012e6:	b09b      	sub	sp, #108	; 0x6c
 80012e8:	9100      	str	r1, [sp, #0]
 80012ea:	9104      	str	r1, [sp, #16]
 80012ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80012f0:	9105      	str	r1, [sp, #20]
 80012f2:	9102      	str	r1, [sp, #8]
 80012f4:	4905      	ldr	r1, [pc, #20]	; (800130c <_vsiprintf_r+0x28>)
 80012f6:	9103      	str	r1, [sp, #12]
 80012f8:	4669      	mov	r1, sp
 80012fa:	f000 f86f 	bl	80013dc <_svfiprintf_r>
 80012fe:	9b00      	ldr	r3, [sp, #0]
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
 8001304:	b01b      	add	sp, #108	; 0x6c
 8001306:	f85d fb04 	ldr.w	pc, [sp], #4
 800130a:	bf00      	nop
 800130c:	ffff0208 	.word	0xffff0208

08001310 <vsiprintf>:
 8001310:	4613      	mov	r3, r2
 8001312:	460a      	mov	r2, r1
 8001314:	4601      	mov	r1, r0
 8001316:	4802      	ldr	r0, [pc, #8]	; (8001320 <vsiprintf+0x10>)
 8001318:	6800      	ldr	r0, [r0, #0]
 800131a:	f7ff bfe3 	b.w	80012e4 <_vsiprintf_r>
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008

08001324 <__ssputs_r>:
 8001324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001328:	688e      	ldr	r6, [r1, #8]
 800132a:	429e      	cmp	r6, r3
 800132c:	4682      	mov	sl, r0
 800132e:	460c      	mov	r4, r1
 8001330:	4690      	mov	r8, r2
 8001332:	461f      	mov	r7, r3
 8001334:	d838      	bhi.n	80013a8 <__ssputs_r+0x84>
 8001336:	898a      	ldrh	r2, [r1, #12]
 8001338:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800133c:	d032      	beq.n	80013a4 <__ssputs_r+0x80>
 800133e:	6825      	ldr	r5, [r4, #0]
 8001340:	6909      	ldr	r1, [r1, #16]
 8001342:	eba5 0901 	sub.w	r9, r5, r1
 8001346:	6965      	ldr	r5, [r4, #20]
 8001348:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800134c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001350:	3301      	adds	r3, #1
 8001352:	444b      	add	r3, r9
 8001354:	106d      	asrs	r5, r5, #1
 8001356:	429d      	cmp	r5, r3
 8001358:	bf38      	it	cc
 800135a:	461d      	movcc	r5, r3
 800135c:	0553      	lsls	r3, r2, #21
 800135e:	d531      	bpl.n	80013c4 <__ssputs_r+0xa0>
 8001360:	4629      	mov	r1, r5
 8001362:	f000 fb63 	bl	8001a2c <_malloc_r>
 8001366:	4606      	mov	r6, r0
 8001368:	b950      	cbnz	r0, 8001380 <__ssputs_r+0x5c>
 800136a:	230c      	movs	r3, #12
 800136c:	f8ca 3000 	str.w	r3, [sl]
 8001370:	89a3      	ldrh	r3, [r4, #12]
 8001372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001376:	81a3      	strh	r3, [r4, #12]
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001380:	6921      	ldr	r1, [r4, #16]
 8001382:	464a      	mov	r2, r9
 8001384:	f000 fabe 	bl	8001904 <memcpy>
 8001388:	89a3      	ldrh	r3, [r4, #12]
 800138a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800138e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001392:	81a3      	strh	r3, [r4, #12]
 8001394:	6126      	str	r6, [r4, #16]
 8001396:	6165      	str	r5, [r4, #20]
 8001398:	444e      	add	r6, r9
 800139a:	eba5 0509 	sub.w	r5, r5, r9
 800139e:	6026      	str	r6, [r4, #0]
 80013a0:	60a5      	str	r5, [r4, #8]
 80013a2:	463e      	mov	r6, r7
 80013a4:	42be      	cmp	r6, r7
 80013a6:	d900      	bls.n	80013aa <__ssputs_r+0x86>
 80013a8:	463e      	mov	r6, r7
 80013aa:	6820      	ldr	r0, [r4, #0]
 80013ac:	4632      	mov	r2, r6
 80013ae:	4641      	mov	r1, r8
 80013b0:	f000 fab6 	bl	8001920 <memmove>
 80013b4:	68a3      	ldr	r3, [r4, #8]
 80013b6:	1b9b      	subs	r3, r3, r6
 80013b8:	60a3      	str	r3, [r4, #8]
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	4433      	add	r3, r6
 80013be:	6023      	str	r3, [r4, #0]
 80013c0:	2000      	movs	r0, #0
 80013c2:	e7db      	b.n	800137c <__ssputs_r+0x58>
 80013c4:	462a      	mov	r2, r5
 80013c6:	f000 fba5 	bl	8001b14 <_realloc_r>
 80013ca:	4606      	mov	r6, r0
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d1e1      	bne.n	8001394 <__ssputs_r+0x70>
 80013d0:	6921      	ldr	r1, [r4, #16]
 80013d2:	4650      	mov	r0, sl
 80013d4:	f000 fabe 	bl	8001954 <_free_r>
 80013d8:	e7c7      	b.n	800136a <__ssputs_r+0x46>
	...

080013dc <_svfiprintf_r>:
 80013dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013e0:	4698      	mov	r8, r3
 80013e2:	898b      	ldrh	r3, [r1, #12]
 80013e4:	061b      	lsls	r3, r3, #24
 80013e6:	b09d      	sub	sp, #116	; 0x74
 80013e8:	4607      	mov	r7, r0
 80013ea:	460d      	mov	r5, r1
 80013ec:	4614      	mov	r4, r2
 80013ee:	d50e      	bpl.n	800140e <_svfiprintf_r+0x32>
 80013f0:	690b      	ldr	r3, [r1, #16]
 80013f2:	b963      	cbnz	r3, 800140e <_svfiprintf_r+0x32>
 80013f4:	2140      	movs	r1, #64	; 0x40
 80013f6:	f000 fb19 	bl	8001a2c <_malloc_r>
 80013fa:	6028      	str	r0, [r5, #0]
 80013fc:	6128      	str	r0, [r5, #16]
 80013fe:	b920      	cbnz	r0, 800140a <_svfiprintf_r+0x2e>
 8001400:	230c      	movs	r3, #12
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	e0d1      	b.n	80015ae <_svfiprintf_r+0x1d2>
 800140a:	2340      	movs	r3, #64	; 0x40
 800140c:	616b      	str	r3, [r5, #20]
 800140e:	2300      	movs	r3, #0
 8001410:	9309      	str	r3, [sp, #36]	; 0x24
 8001412:	2320      	movs	r3, #32
 8001414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001418:	f8cd 800c 	str.w	r8, [sp, #12]
 800141c:	2330      	movs	r3, #48	; 0x30
 800141e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80015c8 <_svfiprintf_r+0x1ec>
 8001422:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001426:	f04f 0901 	mov.w	r9, #1
 800142a:	4623      	mov	r3, r4
 800142c:	469a      	mov	sl, r3
 800142e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001432:	b10a      	cbz	r2, 8001438 <_svfiprintf_r+0x5c>
 8001434:	2a25      	cmp	r2, #37	; 0x25
 8001436:	d1f9      	bne.n	800142c <_svfiprintf_r+0x50>
 8001438:	ebba 0b04 	subs.w	fp, sl, r4
 800143c:	d00b      	beq.n	8001456 <_svfiprintf_r+0x7a>
 800143e:	465b      	mov	r3, fp
 8001440:	4622      	mov	r2, r4
 8001442:	4629      	mov	r1, r5
 8001444:	4638      	mov	r0, r7
 8001446:	f7ff ff6d 	bl	8001324 <__ssputs_r>
 800144a:	3001      	adds	r0, #1
 800144c:	f000 80aa 	beq.w	80015a4 <_svfiprintf_r+0x1c8>
 8001450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001452:	445a      	add	r2, fp
 8001454:	9209      	str	r2, [sp, #36]	; 0x24
 8001456:	f89a 3000 	ldrb.w	r3, [sl]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 80a2 	beq.w	80015a4 <_svfiprintf_r+0x1c8>
 8001460:	2300      	movs	r3, #0
 8001462:	f04f 32ff 	mov.w	r2, #4294967295
 8001466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800146a:	f10a 0a01 	add.w	sl, sl, #1
 800146e:	9304      	str	r3, [sp, #16]
 8001470:	9307      	str	r3, [sp, #28]
 8001472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001476:	931a      	str	r3, [sp, #104]	; 0x68
 8001478:	4654      	mov	r4, sl
 800147a:	2205      	movs	r2, #5
 800147c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001480:	4851      	ldr	r0, [pc, #324]	; (80015c8 <_svfiprintf_r+0x1ec>)
 8001482:	f7fe feb5 	bl	80001f0 <memchr>
 8001486:	9a04      	ldr	r2, [sp, #16]
 8001488:	b9d8      	cbnz	r0, 80014c2 <_svfiprintf_r+0xe6>
 800148a:	06d0      	lsls	r0, r2, #27
 800148c:	bf44      	itt	mi
 800148e:	2320      	movmi	r3, #32
 8001490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001494:	0711      	lsls	r1, r2, #28
 8001496:	bf44      	itt	mi
 8001498:	232b      	movmi	r3, #43	; 0x2b
 800149a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800149e:	f89a 3000 	ldrb.w	r3, [sl]
 80014a2:	2b2a      	cmp	r3, #42	; 0x2a
 80014a4:	d015      	beq.n	80014d2 <_svfiprintf_r+0xf6>
 80014a6:	9a07      	ldr	r2, [sp, #28]
 80014a8:	4654      	mov	r4, sl
 80014aa:	2000      	movs	r0, #0
 80014ac:	f04f 0c0a 	mov.w	ip, #10
 80014b0:	4621      	mov	r1, r4
 80014b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014b6:	3b30      	subs	r3, #48	; 0x30
 80014b8:	2b09      	cmp	r3, #9
 80014ba:	d94e      	bls.n	800155a <_svfiprintf_r+0x17e>
 80014bc:	b1b0      	cbz	r0, 80014ec <_svfiprintf_r+0x110>
 80014be:	9207      	str	r2, [sp, #28]
 80014c0:	e014      	b.n	80014ec <_svfiprintf_r+0x110>
 80014c2:	eba0 0308 	sub.w	r3, r0, r8
 80014c6:	fa09 f303 	lsl.w	r3, r9, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	9304      	str	r3, [sp, #16]
 80014ce:	46a2      	mov	sl, r4
 80014d0:	e7d2      	b.n	8001478 <_svfiprintf_r+0x9c>
 80014d2:	9b03      	ldr	r3, [sp, #12]
 80014d4:	1d19      	adds	r1, r3, #4
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	9103      	str	r1, [sp, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	bfbb      	ittet	lt
 80014de:	425b      	neglt	r3, r3
 80014e0:	f042 0202 	orrlt.w	r2, r2, #2
 80014e4:	9307      	strge	r3, [sp, #28]
 80014e6:	9307      	strlt	r3, [sp, #28]
 80014e8:	bfb8      	it	lt
 80014ea:	9204      	strlt	r2, [sp, #16]
 80014ec:	7823      	ldrb	r3, [r4, #0]
 80014ee:	2b2e      	cmp	r3, #46	; 0x2e
 80014f0:	d10c      	bne.n	800150c <_svfiprintf_r+0x130>
 80014f2:	7863      	ldrb	r3, [r4, #1]
 80014f4:	2b2a      	cmp	r3, #42	; 0x2a
 80014f6:	d135      	bne.n	8001564 <_svfiprintf_r+0x188>
 80014f8:	9b03      	ldr	r3, [sp, #12]
 80014fa:	1d1a      	adds	r2, r3, #4
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	9203      	str	r2, [sp, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	bfb8      	it	lt
 8001504:	f04f 33ff 	movlt.w	r3, #4294967295
 8001508:	3402      	adds	r4, #2
 800150a:	9305      	str	r3, [sp, #20]
 800150c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80015d8 <_svfiprintf_r+0x1fc>
 8001510:	7821      	ldrb	r1, [r4, #0]
 8001512:	2203      	movs	r2, #3
 8001514:	4650      	mov	r0, sl
 8001516:	f7fe fe6b 	bl	80001f0 <memchr>
 800151a:	b140      	cbz	r0, 800152e <_svfiprintf_r+0x152>
 800151c:	2340      	movs	r3, #64	; 0x40
 800151e:	eba0 000a 	sub.w	r0, r0, sl
 8001522:	fa03 f000 	lsl.w	r0, r3, r0
 8001526:	9b04      	ldr	r3, [sp, #16]
 8001528:	4303      	orrs	r3, r0
 800152a:	3401      	adds	r4, #1
 800152c:	9304      	str	r3, [sp, #16]
 800152e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001532:	4826      	ldr	r0, [pc, #152]	; (80015cc <_svfiprintf_r+0x1f0>)
 8001534:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001538:	2206      	movs	r2, #6
 800153a:	f7fe fe59 	bl	80001f0 <memchr>
 800153e:	2800      	cmp	r0, #0
 8001540:	d038      	beq.n	80015b4 <_svfiprintf_r+0x1d8>
 8001542:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <_svfiprintf_r+0x1f4>)
 8001544:	bb1b      	cbnz	r3, 800158e <_svfiprintf_r+0x1b2>
 8001546:	9b03      	ldr	r3, [sp, #12]
 8001548:	3307      	adds	r3, #7
 800154a:	f023 0307 	bic.w	r3, r3, #7
 800154e:	3308      	adds	r3, #8
 8001550:	9303      	str	r3, [sp, #12]
 8001552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001554:	4433      	add	r3, r6
 8001556:	9309      	str	r3, [sp, #36]	; 0x24
 8001558:	e767      	b.n	800142a <_svfiprintf_r+0x4e>
 800155a:	fb0c 3202 	mla	r2, ip, r2, r3
 800155e:	460c      	mov	r4, r1
 8001560:	2001      	movs	r0, #1
 8001562:	e7a5      	b.n	80014b0 <_svfiprintf_r+0xd4>
 8001564:	2300      	movs	r3, #0
 8001566:	3401      	adds	r4, #1
 8001568:	9305      	str	r3, [sp, #20]
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 0c0a 	mov.w	ip, #10
 8001570:	4620      	mov	r0, r4
 8001572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001576:	3a30      	subs	r2, #48	; 0x30
 8001578:	2a09      	cmp	r2, #9
 800157a:	d903      	bls.n	8001584 <_svfiprintf_r+0x1a8>
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0c5      	beq.n	800150c <_svfiprintf_r+0x130>
 8001580:	9105      	str	r1, [sp, #20]
 8001582:	e7c3      	b.n	800150c <_svfiprintf_r+0x130>
 8001584:	fb0c 2101 	mla	r1, ip, r1, r2
 8001588:	4604      	mov	r4, r0
 800158a:	2301      	movs	r3, #1
 800158c:	e7f0      	b.n	8001570 <_svfiprintf_r+0x194>
 800158e:	ab03      	add	r3, sp, #12
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	462a      	mov	r2, r5
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <_svfiprintf_r+0x1f8>)
 8001596:	a904      	add	r1, sp, #16
 8001598:	4638      	mov	r0, r7
 800159a:	f3af 8000 	nop.w
 800159e:	1c42      	adds	r2, r0, #1
 80015a0:	4606      	mov	r6, r0
 80015a2:	d1d6      	bne.n	8001552 <_svfiprintf_r+0x176>
 80015a4:	89ab      	ldrh	r3, [r5, #12]
 80015a6:	065b      	lsls	r3, r3, #25
 80015a8:	f53f af2c 	bmi.w	8001404 <_svfiprintf_r+0x28>
 80015ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80015ae:	b01d      	add	sp, #116	; 0x74
 80015b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015b4:	ab03      	add	r3, sp, #12
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	462a      	mov	r2, r5
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <_svfiprintf_r+0x1f8>)
 80015bc:	a904      	add	r1, sp, #16
 80015be:	4638      	mov	r0, r7
 80015c0:	f000 f87a 	bl	80016b8 <_printf_i>
 80015c4:	e7eb      	b.n	800159e <_svfiprintf_r+0x1c2>
 80015c6:	bf00      	nop
 80015c8:	0800234f 	.word	0x0800234f
 80015cc:	08002359 	.word	0x08002359
 80015d0:	00000000 	.word	0x00000000
 80015d4:	08001325 	.word	0x08001325
 80015d8:	08002355 	.word	0x08002355

080015dc <_printf_common>:
 80015dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015e0:	4616      	mov	r6, r2
 80015e2:	4699      	mov	r9, r3
 80015e4:	688a      	ldr	r2, [r1, #8]
 80015e6:	690b      	ldr	r3, [r1, #16]
 80015e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80015ec:	4293      	cmp	r3, r2
 80015ee:	bfb8      	it	lt
 80015f0:	4613      	movlt	r3, r2
 80015f2:	6033      	str	r3, [r6, #0]
 80015f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80015f8:	4607      	mov	r7, r0
 80015fa:	460c      	mov	r4, r1
 80015fc:	b10a      	cbz	r2, 8001602 <_printf_common+0x26>
 80015fe:	3301      	adds	r3, #1
 8001600:	6033      	str	r3, [r6, #0]
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	0699      	lsls	r1, r3, #26
 8001606:	bf42      	ittt	mi
 8001608:	6833      	ldrmi	r3, [r6, #0]
 800160a:	3302      	addmi	r3, #2
 800160c:	6033      	strmi	r3, [r6, #0]
 800160e:	6825      	ldr	r5, [r4, #0]
 8001610:	f015 0506 	ands.w	r5, r5, #6
 8001614:	d106      	bne.n	8001624 <_printf_common+0x48>
 8001616:	f104 0a19 	add.w	sl, r4, #25
 800161a:	68e3      	ldr	r3, [r4, #12]
 800161c:	6832      	ldr	r2, [r6, #0]
 800161e:	1a9b      	subs	r3, r3, r2
 8001620:	42ab      	cmp	r3, r5
 8001622:	dc26      	bgt.n	8001672 <_printf_common+0x96>
 8001624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001628:	1e13      	subs	r3, r2, #0
 800162a:	6822      	ldr	r2, [r4, #0]
 800162c:	bf18      	it	ne
 800162e:	2301      	movne	r3, #1
 8001630:	0692      	lsls	r2, r2, #26
 8001632:	d42b      	bmi.n	800168c <_printf_common+0xb0>
 8001634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001638:	4649      	mov	r1, r9
 800163a:	4638      	mov	r0, r7
 800163c:	47c0      	blx	r8
 800163e:	3001      	adds	r0, #1
 8001640:	d01e      	beq.n	8001680 <_printf_common+0xa4>
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	68e5      	ldr	r5, [r4, #12]
 8001646:	6832      	ldr	r2, [r6, #0]
 8001648:	f003 0306 	and.w	r3, r3, #6
 800164c:	2b04      	cmp	r3, #4
 800164e:	bf08      	it	eq
 8001650:	1aad      	subeq	r5, r5, r2
 8001652:	68a3      	ldr	r3, [r4, #8]
 8001654:	6922      	ldr	r2, [r4, #16]
 8001656:	bf0c      	ite	eq
 8001658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800165c:	2500      	movne	r5, #0
 800165e:	4293      	cmp	r3, r2
 8001660:	bfc4      	itt	gt
 8001662:	1a9b      	subgt	r3, r3, r2
 8001664:	18ed      	addgt	r5, r5, r3
 8001666:	2600      	movs	r6, #0
 8001668:	341a      	adds	r4, #26
 800166a:	42b5      	cmp	r5, r6
 800166c:	d11a      	bne.n	80016a4 <_printf_common+0xc8>
 800166e:	2000      	movs	r0, #0
 8001670:	e008      	b.n	8001684 <_printf_common+0xa8>
 8001672:	2301      	movs	r3, #1
 8001674:	4652      	mov	r2, sl
 8001676:	4649      	mov	r1, r9
 8001678:	4638      	mov	r0, r7
 800167a:	47c0      	blx	r8
 800167c:	3001      	adds	r0, #1
 800167e:	d103      	bne.n	8001688 <_printf_common+0xac>
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001688:	3501      	adds	r5, #1
 800168a:	e7c6      	b.n	800161a <_printf_common+0x3e>
 800168c:	18e1      	adds	r1, r4, r3
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	2030      	movs	r0, #48	; 0x30
 8001692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001696:	4422      	add	r2, r4
 8001698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800169c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80016a0:	3302      	adds	r3, #2
 80016a2:	e7c7      	b.n	8001634 <_printf_common+0x58>
 80016a4:	2301      	movs	r3, #1
 80016a6:	4622      	mov	r2, r4
 80016a8:	4649      	mov	r1, r9
 80016aa:	4638      	mov	r0, r7
 80016ac:	47c0      	blx	r8
 80016ae:	3001      	adds	r0, #1
 80016b0:	d0e6      	beq.n	8001680 <_printf_common+0xa4>
 80016b2:	3601      	adds	r6, #1
 80016b4:	e7d9      	b.n	800166a <_printf_common+0x8e>
	...

080016b8 <_printf_i>:
 80016b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016bc:	7e0f      	ldrb	r7, [r1, #24]
 80016be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80016c0:	2f78      	cmp	r7, #120	; 0x78
 80016c2:	4691      	mov	r9, r2
 80016c4:	4680      	mov	r8, r0
 80016c6:	460c      	mov	r4, r1
 80016c8:	469a      	mov	sl, r3
 80016ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80016ce:	d807      	bhi.n	80016e0 <_printf_i+0x28>
 80016d0:	2f62      	cmp	r7, #98	; 0x62
 80016d2:	d80a      	bhi.n	80016ea <_printf_i+0x32>
 80016d4:	2f00      	cmp	r7, #0
 80016d6:	f000 80d8 	beq.w	800188a <_printf_i+0x1d2>
 80016da:	2f58      	cmp	r7, #88	; 0x58
 80016dc:	f000 80a3 	beq.w	8001826 <_printf_i+0x16e>
 80016e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80016e8:	e03a      	b.n	8001760 <_printf_i+0xa8>
 80016ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80016ee:	2b15      	cmp	r3, #21
 80016f0:	d8f6      	bhi.n	80016e0 <_printf_i+0x28>
 80016f2:	a101      	add	r1, pc, #4	; (adr r1, 80016f8 <_printf_i+0x40>)
 80016f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80016f8:	08001751 	.word	0x08001751
 80016fc:	08001765 	.word	0x08001765
 8001700:	080016e1 	.word	0x080016e1
 8001704:	080016e1 	.word	0x080016e1
 8001708:	080016e1 	.word	0x080016e1
 800170c:	080016e1 	.word	0x080016e1
 8001710:	08001765 	.word	0x08001765
 8001714:	080016e1 	.word	0x080016e1
 8001718:	080016e1 	.word	0x080016e1
 800171c:	080016e1 	.word	0x080016e1
 8001720:	080016e1 	.word	0x080016e1
 8001724:	08001871 	.word	0x08001871
 8001728:	08001795 	.word	0x08001795
 800172c:	08001853 	.word	0x08001853
 8001730:	080016e1 	.word	0x080016e1
 8001734:	080016e1 	.word	0x080016e1
 8001738:	08001893 	.word	0x08001893
 800173c:	080016e1 	.word	0x080016e1
 8001740:	08001795 	.word	0x08001795
 8001744:	080016e1 	.word	0x080016e1
 8001748:	080016e1 	.word	0x080016e1
 800174c:	0800185b 	.word	0x0800185b
 8001750:	682b      	ldr	r3, [r5, #0]
 8001752:	1d1a      	adds	r2, r3, #4
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	602a      	str	r2, [r5, #0]
 8001758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800175c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001760:	2301      	movs	r3, #1
 8001762:	e0a3      	b.n	80018ac <_printf_i+0x1f4>
 8001764:	6820      	ldr	r0, [r4, #0]
 8001766:	6829      	ldr	r1, [r5, #0]
 8001768:	0606      	lsls	r6, r0, #24
 800176a:	f101 0304 	add.w	r3, r1, #4
 800176e:	d50a      	bpl.n	8001786 <_printf_i+0xce>
 8001770:	680e      	ldr	r6, [r1, #0]
 8001772:	602b      	str	r3, [r5, #0]
 8001774:	2e00      	cmp	r6, #0
 8001776:	da03      	bge.n	8001780 <_printf_i+0xc8>
 8001778:	232d      	movs	r3, #45	; 0x2d
 800177a:	4276      	negs	r6, r6
 800177c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001780:	485e      	ldr	r0, [pc, #376]	; (80018fc <_printf_i+0x244>)
 8001782:	230a      	movs	r3, #10
 8001784:	e019      	b.n	80017ba <_printf_i+0x102>
 8001786:	680e      	ldr	r6, [r1, #0]
 8001788:	602b      	str	r3, [r5, #0]
 800178a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800178e:	bf18      	it	ne
 8001790:	b236      	sxthne	r6, r6
 8001792:	e7ef      	b.n	8001774 <_printf_i+0xbc>
 8001794:	682b      	ldr	r3, [r5, #0]
 8001796:	6820      	ldr	r0, [r4, #0]
 8001798:	1d19      	adds	r1, r3, #4
 800179a:	6029      	str	r1, [r5, #0]
 800179c:	0601      	lsls	r1, r0, #24
 800179e:	d501      	bpl.n	80017a4 <_printf_i+0xec>
 80017a0:	681e      	ldr	r6, [r3, #0]
 80017a2:	e002      	b.n	80017aa <_printf_i+0xf2>
 80017a4:	0646      	lsls	r6, r0, #25
 80017a6:	d5fb      	bpl.n	80017a0 <_printf_i+0xe8>
 80017a8:	881e      	ldrh	r6, [r3, #0]
 80017aa:	4854      	ldr	r0, [pc, #336]	; (80018fc <_printf_i+0x244>)
 80017ac:	2f6f      	cmp	r7, #111	; 0x6f
 80017ae:	bf0c      	ite	eq
 80017b0:	2308      	moveq	r3, #8
 80017b2:	230a      	movne	r3, #10
 80017b4:	2100      	movs	r1, #0
 80017b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80017ba:	6865      	ldr	r5, [r4, #4]
 80017bc:	60a5      	str	r5, [r4, #8]
 80017be:	2d00      	cmp	r5, #0
 80017c0:	bfa2      	ittt	ge
 80017c2:	6821      	ldrge	r1, [r4, #0]
 80017c4:	f021 0104 	bicge.w	r1, r1, #4
 80017c8:	6021      	strge	r1, [r4, #0]
 80017ca:	b90e      	cbnz	r6, 80017d0 <_printf_i+0x118>
 80017cc:	2d00      	cmp	r5, #0
 80017ce:	d04d      	beq.n	800186c <_printf_i+0x1b4>
 80017d0:	4615      	mov	r5, r2
 80017d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80017d6:	fb03 6711 	mls	r7, r3, r1, r6
 80017da:	5dc7      	ldrb	r7, [r0, r7]
 80017dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80017e0:	4637      	mov	r7, r6
 80017e2:	42bb      	cmp	r3, r7
 80017e4:	460e      	mov	r6, r1
 80017e6:	d9f4      	bls.n	80017d2 <_printf_i+0x11a>
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d10b      	bne.n	8001804 <_printf_i+0x14c>
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	07de      	lsls	r6, r3, #31
 80017f0:	d508      	bpl.n	8001804 <_printf_i+0x14c>
 80017f2:	6923      	ldr	r3, [r4, #16]
 80017f4:	6861      	ldr	r1, [r4, #4]
 80017f6:	4299      	cmp	r1, r3
 80017f8:	bfde      	ittt	le
 80017fa:	2330      	movle	r3, #48	; 0x30
 80017fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001800:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001804:	1b52      	subs	r2, r2, r5
 8001806:	6122      	str	r2, [r4, #16]
 8001808:	f8cd a000 	str.w	sl, [sp]
 800180c:	464b      	mov	r3, r9
 800180e:	aa03      	add	r2, sp, #12
 8001810:	4621      	mov	r1, r4
 8001812:	4640      	mov	r0, r8
 8001814:	f7ff fee2 	bl	80015dc <_printf_common>
 8001818:	3001      	adds	r0, #1
 800181a:	d14c      	bne.n	80018b6 <_printf_i+0x1fe>
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	b004      	add	sp, #16
 8001822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001826:	4835      	ldr	r0, [pc, #212]	; (80018fc <_printf_i+0x244>)
 8001828:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800182c:	6829      	ldr	r1, [r5, #0]
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	f851 6b04 	ldr.w	r6, [r1], #4
 8001834:	6029      	str	r1, [r5, #0]
 8001836:	061d      	lsls	r5, r3, #24
 8001838:	d514      	bpl.n	8001864 <_printf_i+0x1ac>
 800183a:	07df      	lsls	r7, r3, #31
 800183c:	bf44      	itt	mi
 800183e:	f043 0320 	orrmi.w	r3, r3, #32
 8001842:	6023      	strmi	r3, [r4, #0]
 8001844:	b91e      	cbnz	r6, 800184e <_printf_i+0x196>
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	f023 0320 	bic.w	r3, r3, #32
 800184c:	6023      	str	r3, [r4, #0]
 800184e:	2310      	movs	r3, #16
 8001850:	e7b0      	b.n	80017b4 <_printf_i+0xfc>
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	f043 0320 	orr.w	r3, r3, #32
 8001858:	6023      	str	r3, [r4, #0]
 800185a:	2378      	movs	r3, #120	; 0x78
 800185c:	4828      	ldr	r0, [pc, #160]	; (8001900 <_printf_i+0x248>)
 800185e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001862:	e7e3      	b.n	800182c <_printf_i+0x174>
 8001864:	0659      	lsls	r1, r3, #25
 8001866:	bf48      	it	mi
 8001868:	b2b6      	uxthmi	r6, r6
 800186a:	e7e6      	b.n	800183a <_printf_i+0x182>
 800186c:	4615      	mov	r5, r2
 800186e:	e7bb      	b.n	80017e8 <_printf_i+0x130>
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	6826      	ldr	r6, [r4, #0]
 8001874:	6961      	ldr	r1, [r4, #20]
 8001876:	1d18      	adds	r0, r3, #4
 8001878:	6028      	str	r0, [r5, #0]
 800187a:	0635      	lsls	r5, r6, #24
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	d501      	bpl.n	8001884 <_printf_i+0x1cc>
 8001880:	6019      	str	r1, [r3, #0]
 8001882:	e002      	b.n	800188a <_printf_i+0x1d2>
 8001884:	0670      	lsls	r0, r6, #25
 8001886:	d5fb      	bpl.n	8001880 <_printf_i+0x1c8>
 8001888:	8019      	strh	r1, [r3, #0]
 800188a:	2300      	movs	r3, #0
 800188c:	6123      	str	r3, [r4, #16]
 800188e:	4615      	mov	r5, r2
 8001890:	e7ba      	b.n	8001808 <_printf_i+0x150>
 8001892:	682b      	ldr	r3, [r5, #0]
 8001894:	1d1a      	adds	r2, r3, #4
 8001896:	602a      	str	r2, [r5, #0]
 8001898:	681d      	ldr	r5, [r3, #0]
 800189a:	6862      	ldr	r2, [r4, #4]
 800189c:	2100      	movs	r1, #0
 800189e:	4628      	mov	r0, r5
 80018a0:	f7fe fca6 	bl	80001f0 <memchr>
 80018a4:	b108      	cbz	r0, 80018aa <_printf_i+0x1f2>
 80018a6:	1b40      	subs	r0, r0, r5
 80018a8:	6060      	str	r0, [r4, #4]
 80018aa:	6863      	ldr	r3, [r4, #4]
 80018ac:	6123      	str	r3, [r4, #16]
 80018ae:	2300      	movs	r3, #0
 80018b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018b4:	e7a8      	b.n	8001808 <_printf_i+0x150>
 80018b6:	6923      	ldr	r3, [r4, #16]
 80018b8:	462a      	mov	r2, r5
 80018ba:	4649      	mov	r1, r9
 80018bc:	4640      	mov	r0, r8
 80018be:	47d0      	blx	sl
 80018c0:	3001      	adds	r0, #1
 80018c2:	d0ab      	beq.n	800181c <_printf_i+0x164>
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	079b      	lsls	r3, r3, #30
 80018c8:	d413      	bmi.n	80018f2 <_printf_i+0x23a>
 80018ca:	68e0      	ldr	r0, [r4, #12]
 80018cc:	9b03      	ldr	r3, [sp, #12]
 80018ce:	4298      	cmp	r0, r3
 80018d0:	bfb8      	it	lt
 80018d2:	4618      	movlt	r0, r3
 80018d4:	e7a4      	b.n	8001820 <_printf_i+0x168>
 80018d6:	2301      	movs	r3, #1
 80018d8:	4632      	mov	r2, r6
 80018da:	4649      	mov	r1, r9
 80018dc:	4640      	mov	r0, r8
 80018de:	47d0      	blx	sl
 80018e0:	3001      	adds	r0, #1
 80018e2:	d09b      	beq.n	800181c <_printf_i+0x164>
 80018e4:	3501      	adds	r5, #1
 80018e6:	68e3      	ldr	r3, [r4, #12]
 80018e8:	9903      	ldr	r1, [sp, #12]
 80018ea:	1a5b      	subs	r3, r3, r1
 80018ec:	42ab      	cmp	r3, r5
 80018ee:	dcf2      	bgt.n	80018d6 <_printf_i+0x21e>
 80018f0:	e7eb      	b.n	80018ca <_printf_i+0x212>
 80018f2:	2500      	movs	r5, #0
 80018f4:	f104 0619 	add.w	r6, r4, #25
 80018f8:	e7f5      	b.n	80018e6 <_printf_i+0x22e>
 80018fa:	bf00      	nop
 80018fc:	08002360 	.word	0x08002360
 8001900:	08002371 	.word	0x08002371

08001904 <memcpy>:
 8001904:	440a      	add	r2, r1
 8001906:	4291      	cmp	r1, r2
 8001908:	f100 33ff 	add.w	r3, r0, #4294967295
 800190c:	d100      	bne.n	8001910 <memcpy+0xc>
 800190e:	4770      	bx	lr
 8001910:	b510      	push	{r4, lr}
 8001912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800191a:	4291      	cmp	r1, r2
 800191c:	d1f9      	bne.n	8001912 <memcpy+0xe>
 800191e:	bd10      	pop	{r4, pc}

08001920 <memmove>:
 8001920:	4288      	cmp	r0, r1
 8001922:	b510      	push	{r4, lr}
 8001924:	eb01 0402 	add.w	r4, r1, r2
 8001928:	d902      	bls.n	8001930 <memmove+0x10>
 800192a:	4284      	cmp	r4, r0
 800192c:	4623      	mov	r3, r4
 800192e:	d807      	bhi.n	8001940 <memmove+0x20>
 8001930:	1e43      	subs	r3, r0, #1
 8001932:	42a1      	cmp	r1, r4
 8001934:	d008      	beq.n	8001948 <memmove+0x28>
 8001936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800193a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800193e:	e7f8      	b.n	8001932 <memmove+0x12>
 8001940:	4402      	add	r2, r0
 8001942:	4601      	mov	r1, r0
 8001944:	428a      	cmp	r2, r1
 8001946:	d100      	bne.n	800194a <memmove+0x2a>
 8001948:	bd10      	pop	{r4, pc}
 800194a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800194e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001952:	e7f7      	b.n	8001944 <memmove+0x24>

08001954 <_free_r>:
 8001954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001956:	2900      	cmp	r1, #0
 8001958:	d044      	beq.n	80019e4 <_free_r+0x90>
 800195a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800195e:	9001      	str	r0, [sp, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	f1a1 0404 	sub.w	r4, r1, #4
 8001966:	bfb8      	it	lt
 8001968:	18e4      	addlt	r4, r4, r3
 800196a:	f000 f913 	bl	8001b94 <__malloc_lock>
 800196e:	4a1e      	ldr	r2, [pc, #120]	; (80019e8 <_free_r+0x94>)
 8001970:	9801      	ldr	r0, [sp, #4]
 8001972:	6813      	ldr	r3, [r2, #0]
 8001974:	b933      	cbnz	r3, 8001984 <_free_r+0x30>
 8001976:	6063      	str	r3, [r4, #4]
 8001978:	6014      	str	r4, [r2, #0]
 800197a:	b003      	add	sp, #12
 800197c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001980:	f000 b90e 	b.w	8001ba0 <__malloc_unlock>
 8001984:	42a3      	cmp	r3, r4
 8001986:	d908      	bls.n	800199a <_free_r+0x46>
 8001988:	6825      	ldr	r5, [r4, #0]
 800198a:	1961      	adds	r1, r4, r5
 800198c:	428b      	cmp	r3, r1
 800198e:	bf01      	itttt	eq
 8001990:	6819      	ldreq	r1, [r3, #0]
 8001992:	685b      	ldreq	r3, [r3, #4]
 8001994:	1949      	addeq	r1, r1, r5
 8001996:	6021      	streq	r1, [r4, #0]
 8001998:	e7ed      	b.n	8001976 <_free_r+0x22>
 800199a:	461a      	mov	r2, r3
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	b10b      	cbz	r3, 80019a4 <_free_r+0x50>
 80019a0:	42a3      	cmp	r3, r4
 80019a2:	d9fa      	bls.n	800199a <_free_r+0x46>
 80019a4:	6811      	ldr	r1, [r2, #0]
 80019a6:	1855      	adds	r5, r2, r1
 80019a8:	42a5      	cmp	r5, r4
 80019aa:	d10b      	bne.n	80019c4 <_free_r+0x70>
 80019ac:	6824      	ldr	r4, [r4, #0]
 80019ae:	4421      	add	r1, r4
 80019b0:	1854      	adds	r4, r2, r1
 80019b2:	42a3      	cmp	r3, r4
 80019b4:	6011      	str	r1, [r2, #0]
 80019b6:	d1e0      	bne.n	800197a <_free_r+0x26>
 80019b8:	681c      	ldr	r4, [r3, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	6053      	str	r3, [r2, #4]
 80019be:	4421      	add	r1, r4
 80019c0:	6011      	str	r1, [r2, #0]
 80019c2:	e7da      	b.n	800197a <_free_r+0x26>
 80019c4:	d902      	bls.n	80019cc <_free_r+0x78>
 80019c6:	230c      	movs	r3, #12
 80019c8:	6003      	str	r3, [r0, #0]
 80019ca:	e7d6      	b.n	800197a <_free_r+0x26>
 80019cc:	6825      	ldr	r5, [r4, #0]
 80019ce:	1961      	adds	r1, r4, r5
 80019d0:	428b      	cmp	r3, r1
 80019d2:	bf04      	itt	eq
 80019d4:	6819      	ldreq	r1, [r3, #0]
 80019d6:	685b      	ldreq	r3, [r3, #4]
 80019d8:	6063      	str	r3, [r4, #4]
 80019da:	bf04      	itt	eq
 80019dc:	1949      	addeq	r1, r1, r5
 80019de:	6021      	streq	r1, [r4, #0]
 80019e0:	6054      	str	r4, [r2, #4]
 80019e2:	e7ca      	b.n	800197a <_free_r+0x26>
 80019e4:	b003      	add	sp, #12
 80019e6:	bd30      	pop	{r4, r5, pc}
 80019e8:	2000e0cc 	.word	0x2000e0cc

080019ec <sbrk_aligned>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	4e0e      	ldr	r6, [pc, #56]	; (8001a28 <sbrk_aligned+0x3c>)
 80019f0:	460c      	mov	r4, r1
 80019f2:	6831      	ldr	r1, [r6, #0]
 80019f4:	4605      	mov	r5, r0
 80019f6:	b911      	cbnz	r1, 80019fe <sbrk_aligned+0x12>
 80019f8:	f000 f8bc 	bl	8001b74 <_sbrk_r>
 80019fc:	6030      	str	r0, [r6, #0]
 80019fe:	4621      	mov	r1, r4
 8001a00:	4628      	mov	r0, r5
 8001a02:	f000 f8b7 	bl	8001b74 <_sbrk_r>
 8001a06:	1c43      	adds	r3, r0, #1
 8001a08:	d00a      	beq.n	8001a20 <sbrk_aligned+0x34>
 8001a0a:	1cc4      	adds	r4, r0, #3
 8001a0c:	f024 0403 	bic.w	r4, r4, #3
 8001a10:	42a0      	cmp	r0, r4
 8001a12:	d007      	beq.n	8001a24 <sbrk_aligned+0x38>
 8001a14:	1a21      	subs	r1, r4, r0
 8001a16:	4628      	mov	r0, r5
 8001a18:	f000 f8ac 	bl	8001b74 <_sbrk_r>
 8001a1c:	3001      	adds	r0, #1
 8001a1e:	d101      	bne.n	8001a24 <sbrk_aligned+0x38>
 8001a20:	f04f 34ff 	mov.w	r4, #4294967295
 8001a24:	4620      	mov	r0, r4
 8001a26:	bd70      	pop	{r4, r5, r6, pc}
 8001a28:	2000e0d0 	.word	0x2000e0d0

08001a2c <_malloc_r>:
 8001a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a30:	1ccd      	adds	r5, r1, #3
 8001a32:	f025 0503 	bic.w	r5, r5, #3
 8001a36:	3508      	adds	r5, #8
 8001a38:	2d0c      	cmp	r5, #12
 8001a3a:	bf38      	it	cc
 8001a3c:	250c      	movcc	r5, #12
 8001a3e:	2d00      	cmp	r5, #0
 8001a40:	4607      	mov	r7, r0
 8001a42:	db01      	blt.n	8001a48 <_malloc_r+0x1c>
 8001a44:	42a9      	cmp	r1, r5
 8001a46:	d905      	bls.n	8001a54 <_malloc_r+0x28>
 8001a48:	230c      	movs	r3, #12
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	2600      	movs	r6, #0
 8001a4e:	4630      	mov	r0, r6
 8001a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a54:	4e2e      	ldr	r6, [pc, #184]	; (8001b10 <_malloc_r+0xe4>)
 8001a56:	f000 f89d 	bl	8001b94 <__malloc_lock>
 8001a5a:	6833      	ldr	r3, [r6, #0]
 8001a5c:	461c      	mov	r4, r3
 8001a5e:	bb34      	cbnz	r4, 8001aae <_malloc_r+0x82>
 8001a60:	4629      	mov	r1, r5
 8001a62:	4638      	mov	r0, r7
 8001a64:	f7ff ffc2 	bl	80019ec <sbrk_aligned>
 8001a68:	1c43      	adds	r3, r0, #1
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	d14d      	bne.n	8001b0a <_malloc_r+0xde>
 8001a6e:	6834      	ldr	r4, [r6, #0]
 8001a70:	4626      	mov	r6, r4
 8001a72:	2e00      	cmp	r6, #0
 8001a74:	d140      	bne.n	8001af8 <_malloc_r+0xcc>
 8001a76:	6823      	ldr	r3, [r4, #0]
 8001a78:	4631      	mov	r1, r6
 8001a7a:	4638      	mov	r0, r7
 8001a7c:	eb04 0803 	add.w	r8, r4, r3
 8001a80:	f000 f878 	bl	8001b74 <_sbrk_r>
 8001a84:	4580      	cmp	r8, r0
 8001a86:	d13a      	bne.n	8001afe <_malloc_r+0xd2>
 8001a88:	6821      	ldr	r1, [r4, #0]
 8001a8a:	3503      	adds	r5, #3
 8001a8c:	1a6d      	subs	r5, r5, r1
 8001a8e:	f025 0503 	bic.w	r5, r5, #3
 8001a92:	3508      	adds	r5, #8
 8001a94:	2d0c      	cmp	r5, #12
 8001a96:	bf38      	it	cc
 8001a98:	250c      	movcc	r5, #12
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	4638      	mov	r0, r7
 8001a9e:	f7ff ffa5 	bl	80019ec <sbrk_aligned>
 8001aa2:	3001      	adds	r0, #1
 8001aa4:	d02b      	beq.n	8001afe <_malloc_r+0xd2>
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	442b      	add	r3, r5
 8001aaa:	6023      	str	r3, [r4, #0]
 8001aac:	e00e      	b.n	8001acc <_malloc_r+0xa0>
 8001aae:	6822      	ldr	r2, [r4, #0]
 8001ab0:	1b52      	subs	r2, r2, r5
 8001ab2:	d41e      	bmi.n	8001af2 <_malloc_r+0xc6>
 8001ab4:	2a0b      	cmp	r2, #11
 8001ab6:	d916      	bls.n	8001ae6 <_malloc_r+0xba>
 8001ab8:	1961      	adds	r1, r4, r5
 8001aba:	42a3      	cmp	r3, r4
 8001abc:	6025      	str	r5, [r4, #0]
 8001abe:	bf18      	it	ne
 8001ac0:	6059      	strne	r1, [r3, #4]
 8001ac2:	6863      	ldr	r3, [r4, #4]
 8001ac4:	bf08      	it	eq
 8001ac6:	6031      	streq	r1, [r6, #0]
 8001ac8:	5162      	str	r2, [r4, r5]
 8001aca:	604b      	str	r3, [r1, #4]
 8001acc:	4638      	mov	r0, r7
 8001ace:	f104 060b 	add.w	r6, r4, #11
 8001ad2:	f000 f865 	bl	8001ba0 <__malloc_unlock>
 8001ad6:	f026 0607 	bic.w	r6, r6, #7
 8001ada:	1d23      	adds	r3, r4, #4
 8001adc:	1af2      	subs	r2, r6, r3
 8001ade:	d0b6      	beq.n	8001a4e <_malloc_r+0x22>
 8001ae0:	1b9b      	subs	r3, r3, r6
 8001ae2:	50a3      	str	r3, [r4, r2]
 8001ae4:	e7b3      	b.n	8001a4e <_malloc_r+0x22>
 8001ae6:	6862      	ldr	r2, [r4, #4]
 8001ae8:	42a3      	cmp	r3, r4
 8001aea:	bf0c      	ite	eq
 8001aec:	6032      	streq	r2, [r6, #0]
 8001aee:	605a      	strne	r2, [r3, #4]
 8001af0:	e7ec      	b.n	8001acc <_malloc_r+0xa0>
 8001af2:	4623      	mov	r3, r4
 8001af4:	6864      	ldr	r4, [r4, #4]
 8001af6:	e7b2      	b.n	8001a5e <_malloc_r+0x32>
 8001af8:	4634      	mov	r4, r6
 8001afa:	6876      	ldr	r6, [r6, #4]
 8001afc:	e7b9      	b.n	8001a72 <_malloc_r+0x46>
 8001afe:	230c      	movs	r3, #12
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	4638      	mov	r0, r7
 8001b04:	f000 f84c 	bl	8001ba0 <__malloc_unlock>
 8001b08:	e7a1      	b.n	8001a4e <_malloc_r+0x22>
 8001b0a:	6025      	str	r5, [r4, #0]
 8001b0c:	e7de      	b.n	8001acc <_malloc_r+0xa0>
 8001b0e:	bf00      	nop
 8001b10:	2000e0cc 	.word	0x2000e0cc

08001b14 <_realloc_r>:
 8001b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b18:	4680      	mov	r8, r0
 8001b1a:	4614      	mov	r4, r2
 8001b1c:	460e      	mov	r6, r1
 8001b1e:	b921      	cbnz	r1, 8001b2a <_realloc_r+0x16>
 8001b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b24:	4611      	mov	r1, r2
 8001b26:	f7ff bf81 	b.w	8001a2c <_malloc_r>
 8001b2a:	b92a      	cbnz	r2, 8001b38 <_realloc_r+0x24>
 8001b2c:	f7ff ff12 	bl	8001954 <_free_r>
 8001b30:	4625      	mov	r5, r4
 8001b32:	4628      	mov	r0, r5
 8001b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b38:	f000 f838 	bl	8001bac <_malloc_usable_size_r>
 8001b3c:	4284      	cmp	r4, r0
 8001b3e:	4607      	mov	r7, r0
 8001b40:	d802      	bhi.n	8001b48 <_realloc_r+0x34>
 8001b42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001b46:	d812      	bhi.n	8001b6e <_realloc_r+0x5a>
 8001b48:	4621      	mov	r1, r4
 8001b4a:	4640      	mov	r0, r8
 8001b4c:	f7ff ff6e 	bl	8001a2c <_malloc_r>
 8001b50:	4605      	mov	r5, r0
 8001b52:	2800      	cmp	r0, #0
 8001b54:	d0ed      	beq.n	8001b32 <_realloc_r+0x1e>
 8001b56:	42bc      	cmp	r4, r7
 8001b58:	4622      	mov	r2, r4
 8001b5a:	4631      	mov	r1, r6
 8001b5c:	bf28      	it	cs
 8001b5e:	463a      	movcs	r2, r7
 8001b60:	f7ff fed0 	bl	8001904 <memcpy>
 8001b64:	4631      	mov	r1, r6
 8001b66:	4640      	mov	r0, r8
 8001b68:	f7ff fef4 	bl	8001954 <_free_r>
 8001b6c:	e7e1      	b.n	8001b32 <_realloc_r+0x1e>
 8001b6e:	4635      	mov	r5, r6
 8001b70:	e7df      	b.n	8001b32 <_realloc_r+0x1e>
	...

08001b74 <_sbrk_r>:
 8001b74:	b538      	push	{r3, r4, r5, lr}
 8001b76:	4d06      	ldr	r5, [pc, #24]	; (8001b90 <_sbrk_r+0x1c>)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	4608      	mov	r0, r1
 8001b7e:	602b      	str	r3, [r5, #0]
 8001b80:	f7ff fb14 	bl	80011ac <_sbrk>
 8001b84:	1c43      	adds	r3, r0, #1
 8001b86:	d102      	bne.n	8001b8e <_sbrk_r+0x1a>
 8001b88:	682b      	ldr	r3, [r5, #0]
 8001b8a:	b103      	cbz	r3, 8001b8e <_sbrk_r+0x1a>
 8001b8c:	6023      	str	r3, [r4, #0]
 8001b8e:	bd38      	pop	{r3, r4, r5, pc}
 8001b90:	2000e0d4 	.word	0x2000e0d4

08001b94 <__malloc_lock>:
 8001b94:	4801      	ldr	r0, [pc, #4]	; (8001b9c <__malloc_lock+0x8>)
 8001b96:	f000 b811 	b.w	8001bbc <__retarget_lock_acquire_recursive>
 8001b9a:	bf00      	nop
 8001b9c:	2000e0d8 	.word	0x2000e0d8

08001ba0 <__malloc_unlock>:
 8001ba0:	4801      	ldr	r0, [pc, #4]	; (8001ba8 <__malloc_unlock+0x8>)
 8001ba2:	f000 b80c 	b.w	8001bbe <__retarget_lock_release_recursive>
 8001ba6:	bf00      	nop
 8001ba8:	2000e0d8 	.word	0x2000e0d8

08001bac <_malloc_usable_size_r>:
 8001bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bb0:	1f18      	subs	r0, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bfbc      	itt	lt
 8001bb6:	580b      	ldrlt	r3, [r1, r0]
 8001bb8:	18c0      	addlt	r0, r0, r3
 8001bba:	4770      	bx	lr

08001bbc <__retarget_lock_acquire_recursive>:
 8001bbc:	4770      	bx	lr

08001bbe <__retarget_lock_release_recursive>:
 8001bbe:	4770      	bx	lr

08001bc0 <_init>:
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc2:	bf00      	nop
 8001bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bc6:	bc08      	pop	{r3}
 8001bc8:	469e      	mov	lr, r3
 8001bca:	4770      	bx	lr

08001bcc <_fini>:
 8001bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bce:	bf00      	nop
 8001bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bd2:	bc08      	pop	{r3}
 8001bd4:	469e      	mov	lr, r3
 8001bd6:	4770      	bx	lr
